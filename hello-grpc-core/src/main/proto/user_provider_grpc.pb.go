// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: user_provider.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProviderClient is the client API for UserProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProviderClient interface {
	// 根据用户id获取用户信息的服务(具体服务/函数)
	GetByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserVoReplay, error)
}

type userProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProviderClient(cc grpc.ClientConnInterface) UserProviderClient {
	return &userProviderClient{cc}
}

func (c *userProviderClient) GetByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserVoReplay, error) {
	out := new(UserVoReplay)
	err := c.cc.Invoke(ctx, "/com.jd.hello.grpc.api.UserProvider/getByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProviderServer is the server API for UserProvider service.
// All implementations must embed UnimplementedUserProviderServer
// for forward compatibility
type UserProviderServer interface {
	// 根据用户id获取用户信息的服务(具体服务/函数)
	GetByUserId(context.Context, *UserIdRequest) (*UserVoReplay, error)
	mustEmbedUnimplementedUserProviderServer()
}

// UnimplementedUserProviderServer must be embedded to have forward compatible implementations.
type UnimplementedUserProviderServer struct {
}

func (UnimplementedUserProviderServer) GetByUserId(context.Context, *UserIdRequest) (*UserVoReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserId not implemented")
}
func (UnimplementedUserProviderServer) mustEmbedUnimplementedUserProviderServer() {}

// UnsafeUserProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProviderServer will
// result in compilation errors.
type UnsafeUserProviderServer interface {
	mustEmbedUnimplementedUserProviderServer()
}

func RegisterUserProviderServer(s grpc.ServiceRegistrar, srv UserProviderServer) {
	s.RegisterService(&UserProvider_ServiceDesc, srv)
}

func _UserProvider_GetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProviderServer).GetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.jd.hello.grpc.api.UserProvider/getByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProviderServer).GetByUserId(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProvider_ServiceDesc is the grpc.ServiceDesc for UserProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.jd.hello.grpc.api.UserProvider",
	HandlerType: (*UserProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getByUserId",
			Handler:    _UserProvider_GetByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_provider.proto",
}
