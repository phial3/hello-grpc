// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus/consensus.proto

package org.chainmaker.pb.consensus;

public final class Consensus {
  private Consensus() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code consensus.ConsensusType}
   */
  public enum ConsensusType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SOLO = 0;</code>
     */
    SOLO(0),
    /**
     * <code>TBFT = 1;</code>
     */
    TBFT(1),
    /**
     * <code>MBFT = 2;</code>
     */
    MBFT(2),
    /**
     * <code>MAXBFT = 3;</code>
     */
    MAXBFT(3),
    /**
     * <code>RAFT = 4;</code>
     */
    RAFT(4),
    /**
     * <code>DPOS = 5;</code>
     */
    DPOS(5),
    /**
     * <code>POW = 10;</code>
     */
    POW(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SOLO = 0;</code>
     */
    public static final int SOLO_VALUE = 0;
    /**
     * <code>TBFT = 1;</code>
     */
    public static final int TBFT_VALUE = 1;
    /**
     * <code>MBFT = 2;</code>
     */
    public static final int MBFT_VALUE = 2;
    /**
     * <code>MAXBFT = 3;</code>
     */
    public static final int MAXBFT_VALUE = 3;
    /**
     * <code>RAFT = 4;</code>
     */
    public static final int RAFT_VALUE = 4;
    /**
     * <code>DPOS = 5;</code>
     */
    public static final int DPOS_VALUE = 5;
    /**
     * <code>POW = 10;</code>
     */
    public static final int POW_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConsensusType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConsensusType forNumber(int value) {
      switch (value) {
        case 0: return SOLO;
        case 1: return TBFT;
        case 2: return MBFT;
        case 3: return MAXBFT;
        case 4: return RAFT;
        case 5: return DPOS;
        case 10: return POW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConsensusType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConsensusType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConsensusType>() {
            public ConsensusType findValueByNumber(int number) {
              return ConsensusType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.getDescriptor().getEnumTypes().get(0);
    }

    private static final ConsensusType[] VALUES = values();

    public static ConsensusType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConsensusType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:consensus.ConsensusType)
  }

  public interface VerifyResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:consensus.VerifyResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.common.Block verified_block = 1;</code>
     * @return Whether the verifiedBlock field is set.
     */
    boolean hasVerifiedBlock();
    /**
     * <code>.common.Block verified_block = 1;</code>
     * @return The verifiedBlock.
     */
    org.chainmaker.pb.common.ChainmakerBlock.Block getVerifiedBlock();
    /**
     * <code>.common.Block verified_block = 1;</code>
     */
    org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getVerifiedBlockOrBuilder();

    /**
     * <code>.consensus.VerifyResult.Code code = 2;</code>
     * @return The enum numeric value on the wire for code.
     */
    int getCodeValue();
    /**
     * <code>.consensus.VerifyResult.Code code = 2;</code>
     * @return The code.
     */
    org.chainmaker.pb.consensus.Consensus.VerifyResult.Code getCode();

    /**
     * <code>string msg = 3;</code>
     * @return The msg.
     */
    java.lang.String getMsg();
    /**
     * <code>string msg = 3;</code>
     * @return The bytes for msg.
     */
    com.google.protobuf.ByteString
        getMsgBytes();

    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    int getTxsRwSetCount();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    boolean containsTxsRwSet(
        java.lang.String key);
    /**
     * Use {@link #getTxsRwSetMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    getTxsRwSet();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    getTxsRwSetMap();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */

    /* nullable */
org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
        java.lang.String key,
        /* nullable */
org.chainmaker.pb.common.Rwset.TxRWSet defaultValue);
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */

    org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code consensus.VerifyResult}
   */
  public static final class VerifyResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:consensus.VerifyResult)
      VerifyResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use VerifyResult.newBuilder() to construct.
    private VerifyResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VerifyResult() {
      code_ = 0;
      msg_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new VerifyResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VerifyResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.chainmaker.pb.common.ChainmakerBlock.Block.Builder subBuilder = null;
              if (verifiedBlock_ != null) {
                subBuilder = verifiedBlock_.toBuilder();
              }
              verifiedBlock_ = input.readMessage(org.chainmaker.pb.common.ChainmakerBlock.Block.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(verifiedBlock_);
                verifiedBlock_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              code_ = rawValue;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              msg_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                txsRwSet_ = com.google.protobuf.MapField.newMapField(
                    TxsRwSetDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
              txsRwSet__ = input.readMessage(
                  TxsRwSetDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              txsRwSet_.getMutableMap().put(
                  txsRwSet__.getKey(), txsRwSet__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetTxsRwSet();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.consensus.Consensus.VerifyResult.class, org.chainmaker.pb.consensus.Consensus.VerifyResult.Builder.class);
    }

    /**
     * Protobuf enum {@code consensus.VerifyResult.Code}
     */
    public enum Code
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SUCCESS = 0;</code>
       */
      SUCCESS(0),
      /**
       * <code>FAIL = 1;</code>
       */
      FAIL(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SUCCESS = 0;</code>
       */
      public static final int SUCCESS_VALUE = 0;
      /**
       * <code>FAIL = 1;</code>
       */
      public static final int FAIL_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Code valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Code forNumber(int value) {
        switch (value) {
          case 0: return SUCCESS;
          case 1: return FAIL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Code>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Code> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Code>() {
              public Code findValueByNumber(int number) {
                return Code.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.VerifyResult.getDescriptor().getEnumTypes().get(0);
      }

      private static final Code[] VALUES = values();

      public static Code valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Code(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:consensus.VerifyResult.Code)
    }

    public static final int VERIFIED_BLOCK_FIELD_NUMBER = 1;
    private org.chainmaker.pb.common.ChainmakerBlock.Block verifiedBlock_;
    /**
     * <code>.common.Block verified_block = 1;</code>
     * @return Whether the verifiedBlock field is set.
     */
    @java.lang.Override
    public boolean hasVerifiedBlock() {
      return verifiedBlock_ != null;
    }
    /**
     * <code>.common.Block verified_block = 1;</code>
     * @return The verifiedBlock.
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerBlock.Block getVerifiedBlock() {
      return verifiedBlock_ == null ? org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : verifiedBlock_;
    }
    /**
     * <code>.common.Block verified_block = 1;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getVerifiedBlockOrBuilder() {
      return getVerifiedBlock();
    }

    public static final int CODE_FIELD_NUMBER = 2;
    private int code_;
    /**
     * <code>.consensus.VerifyResult.Code code = 2;</code>
     * @return The enum numeric value on the wire for code.
     */
    @java.lang.Override public int getCodeValue() {
      return code_;
    }
    /**
     * <code>.consensus.VerifyResult.Code code = 2;</code>
     * @return The code.
     */
    @java.lang.Override public org.chainmaker.pb.consensus.Consensus.VerifyResult.Code getCode() {
      @SuppressWarnings("deprecation")
      org.chainmaker.pb.consensus.Consensus.VerifyResult.Code result = org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.valueOf(code_);
      return result == null ? org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.UNRECOGNIZED : result;
    }

    public static final int MSG_FIELD_NUMBER = 3;
    private volatile java.lang.Object msg_;
    /**
     * <code>string msg = 3;</code>
     * @return The msg.
     */
    @java.lang.Override
    public java.lang.String getMsg() {
      java.lang.Object ref = msg_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        msg_ = s;
        return s;
      }
    }
    /**
     * <code>string msg = 3;</code>
     * @return The bytes for msg.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMsgBytes() {
      java.lang.Object ref = msg_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        msg_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TXS_RW_SET_FIELD_NUMBER = 4;
    private static final class TxsRwSetDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>newDefaultInstance(
                  org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_TxsRwSetEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.chainmaker.pb.common.Rwset.TxRWSet.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> txsRwSet_;
    private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    internalGetTxsRwSet() {
      if (txsRwSet_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TxsRwSetDefaultEntryHolder.defaultEntry);
      }
      return txsRwSet_;
    }

    public int getTxsRwSetCount() {
      return internalGetTxsRwSet().getMap().size();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */

    @java.lang.Override
    public boolean containsTxsRwSet(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTxsRwSet().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTxsRwSetMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSet() {
      return getTxsRwSetMap();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSetMap() {
      return internalGetTxsRwSet().getMap();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    @java.lang.Override

    public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
        java.lang.String key,
        org.chainmaker.pb.common.Rwset.TxRWSet defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
          internalGetTxsRwSet().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
     */
    @java.lang.Override

    public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
          internalGetTxsRwSet().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (verifiedBlock_ != null) {
        output.writeMessage(1, getVerifiedBlock());
      }
      if (code_ != org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.SUCCESS.getNumber()) {
        output.writeEnum(2, code_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(msg_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, msg_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTxsRwSet(),
          TxsRwSetDefaultEntryHolder.defaultEntry,
          4);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (verifiedBlock_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getVerifiedBlock());
      }
      if (code_ != org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.SUCCESS.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, code_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(msg_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, msg_);
      }
      for (java.util.Map.Entry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> entry
           : internalGetTxsRwSet().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
        txsRwSet__ = TxsRwSetDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, txsRwSet__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.consensus.Consensus.VerifyResult)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.consensus.Consensus.VerifyResult other = (org.chainmaker.pb.consensus.Consensus.VerifyResult) obj;

      if (hasVerifiedBlock() != other.hasVerifiedBlock()) return false;
      if (hasVerifiedBlock()) {
        if (!getVerifiedBlock()
            .equals(other.getVerifiedBlock())) return false;
      }
      if (code_ != other.code_) return false;
      if (!getMsg()
          .equals(other.getMsg())) return false;
      if (!internalGetTxsRwSet().equals(
          other.internalGetTxsRwSet())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasVerifiedBlock()) {
        hash = (37 * hash) + VERIFIED_BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getVerifiedBlock().hashCode();
      }
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + code_;
      hash = (37 * hash) + MSG_FIELD_NUMBER;
      hash = (53 * hash) + getMsg().hashCode();
      if (!internalGetTxsRwSet().getMap().isEmpty()) {
        hash = (37 * hash) + TXS_RW_SET_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTxsRwSet().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.VerifyResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.consensus.Consensus.VerifyResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code consensus.VerifyResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:consensus.VerifyResult)
        org.chainmaker.pb.consensus.Consensus.VerifyResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetTxsRwSet();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableTxsRwSet();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.consensus.Consensus.VerifyResult.class, org.chainmaker.pb.consensus.Consensus.VerifyResult.Builder.class);
      }

      // Construct using org.chainmaker.pb.consensus.Consensus.VerifyResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (verifiedBlockBuilder_ == null) {
          verifiedBlock_ = null;
        } else {
          verifiedBlock_ = null;
          verifiedBlockBuilder_ = null;
        }
        code_ = 0;

        msg_ = "";

        internalGetMutableTxsRwSet().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_VerifyResult_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.VerifyResult getDefaultInstanceForType() {
        return org.chainmaker.pb.consensus.Consensus.VerifyResult.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.VerifyResult build() {
        org.chainmaker.pb.consensus.Consensus.VerifyResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.VerifyResult buildPartial() {
        org.chainmaker.pb.consensus.Consensus.VerifyResult result = new org.chainmaker.pb.consensus.Consensus.VerifyResult(this);
        int from_bitField0_ = bitField0_;
        if (verifiedBlockBuilder_ == null) {
          result.verifiedBlock_ = verifiedBlock_;
        } else {
          result.verifiedBlock_ = verifiedBlockBuilder_.build();
        }
        result.code_ = code_;
        result.msg_ = msg_;
        result.txsRwSet_ = internalGetTxsRwSet();
        result.txsRwSet_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.consensus.Consensus.VerifyResult) {
          return mergeFrom((org.chainmaker.pb.consensus.Consensus.VerifyResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.consensus.Consensus.VerifyResult other) {
        if (other == org.chainmaker.pb.consensus.Consensus.VerifyResult.getDefaultInstance()) return this;
        if (other.hasVerifiedBlock()) {
          mergeVerifiedBlock(other.getVerifiedBlock());
        }
        if (other.code_ != 0) {
          setCodeValue(other.getCodeValue());
        }
        if (!other.getMsg().isEmpty()) {
          msg_ = other.msg_;
          onChanged();
        }
        internalGetMutableTxsRwSet().mergeFrom(
            other.internalGetTxsRwSet());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.consensus.Consensus.VerifyResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.consensus.Consensus.VerifyResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.chainmaker.pb.common.ChainmakerBlock.Block verifiedBlock_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder> verifiedBlockBuilder_;
      /**
       * <code>.common.Block verified_block = 1;</code>
       * @return Whether the verifiedBlock field is set.
       */
      public boolean hasVerifiedBlock() {
        return verifiedBlockBuilder_ != null || verifiedBlock_ != null;
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       * @return The verifiedBlock.
       */
      public org.chainmaker.pb.common.ChainmakerBlock.Block getVerifiedBlock() {
        if (verifiedBlockBuilder_ == null) {
          return verifiedBlock_ == null ? org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : verifiedBlock_;
        } else {
          return verifiedBlockBuilder_.getMessage();
        }
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public Builder setVerifiedBlock(org.chainmaker.pb.common.ChainmakerBlock.Block value) {
        if (verifiedBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          verifiedBlock_ = value;
          onChanged();
        } else {
          verifiedBlockBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public Builder setVerifiedBlock(
          org.chainmaker.pb.common.ChainmakerBlock.Block.Builder builderForValue) {
        if (verifiedBlockBuilder_ == null) {
          verifiedBlock_ = builderForValue.build();
          onChanged();
        } else {
          verifiedBlockBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public Builder mergeVerifiedBlock(org.chainmaker.pb.common.ChainmakerBlock.Block value) {
        if (verifiedBlockBuilder_ == null) {
          if (verifiedBlock_ != null) {
            verifiedBlock_ =
              org.chainmaker.pb.common.ChainmakerBlock.Block.newBuilder(verifiedBlock_).mergeFrom(value).buildPartial();
          } else {
            verifiedBlock_ = value;
          }
          onChanged();
        } else {
          verifiedBlockBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public Builder clearVerifiedBlock() {
        if (verifiedBlockBuilder_ == null) {
          verifiedBlock_ = null;
          onChanged();
        } else {
          verifiedBlock_ = null;
          verifiedBlockBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public org.chainmaker.pb.common.ChainmakerBlock.Block.Builder getVerifiedBlockBuilder() {
        
        onChanged();
        return getVerifiedBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      public org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getVerifiedBlockOrBuilder() {
        if (verifiedBlockBuilder_ != null) {
          return verifiedBlockBuilder_.getMessageOrBuilder();
        } else {
          return verifiedBlock_ == null ?
              org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : verifiedBlock_;
        }
      }
      /**
       * <code>.common.Block verified_block = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder> 
          getVerifiedBlockFieldBuilder() {
        if (verifiedBlockBuilder_ == null) {
          verifiedBlockBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder>(
                  getVerifiedBlock(),
                  getParentForChildren(),
                  isClean());
          verifiedBlock_ = null;
        }
        return verifiedBlockBuilder_;
      }

      private int code_ = 0;
      /**
       * <code>.consensus.VerifyResult.Code code = 2;</code>
       * @return The enum numeric value on the wire for code.
       */
      @java.lang.Override public int getCodeValue() {
        return code_;
      }
      /**
       * <code>.consensus.VerifyResult.Code code = 2;</code>
       * @param value The enum numeric value on the wire for code to set.
       * @return This builder for chaining.
       */
      public Builder setCodeValue(int value) {
        
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.consensus.VerifyResult.Code code = 2;</code>
       * @return The code.
       */
      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.VerifyResult.Code getCode() {
        @SuppressWarnings("deprecation")
        org.chainmaker.pb.consensus.Consensus.VerifyResult.Code result = org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.valueOf(code_);
        return result == null ? org.chainmaker.pb.consensus.Consensus.VerifyResult.Code.UNRECOGNIZED : result;
      }
      /**
       * <code>.consensus.VerifyResult.Code code = 2;</code>
       * @param value The code to set.
       * @return This builder for chaining.
       */
      public Builder setCode(org.chainmaker.pb.consensus.Consensus.VerifyResult.Code value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        code_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.consensus.VerifyResult.Code code = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCode() {
        
        code_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object msg_ = "";
      /**
       * <code>string msg = 3;</code>
       * @return The msg.
       */
      public java.lang.String getMsg() {
        java.lang.Object ref = msg_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          msg_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string msg = 3;</code>
       * @return The bytes for msg.
       */
      public com.google.protobuf.ByteString
          getMsgBytes() {
        java.lang.Object ref = msg_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          msg_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string msg = 3;</code>
       * @param value The msg to set.
       * @return This builder for chaining.
       */
      public Builder setMsg(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string msg = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMsg() {
        
        msg_ = getDefaultInstance().getMsg();
        onChanged();
        return this;
      }
      /**
       * <code>string msg = 3;</code>
       * @param value The bytes for msg to set.
       * @return This builder for chaining.
       */
      public Builder setMsgBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        msg_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> txsRwSet_;
      private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      internalGetTxsRwSet() {
        if (txsRwSet_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TxsRwSetDefaultEntryHolder.defaultEntry);
        }
        return txsRwSet_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      internalGetMutableTxsRwSet() {
        onChanged();;
        if (txsRwSet_ == null) {
          txsRwSet_ = com.google.protobuf.MapField.newMapField(
              TxsRwSetDefaultEntryHolder.defaultEntry);
        }
        if (!txsRwSet_.isMutable()) {
          txsRwSet_ = txsRwSet_.copy();
        }
        return txsRwSet_;
      }

      public int getTxsRwSetCount() {
        return internalGetTxsRwSet().getMap().size();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */

      @java.lang.Override
      public boolean containsTxsRwSet(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetTxsRwSet().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTxsRwSetMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSet() {
        return getTxsRwSetMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSetMap() {
        return internalGetTxsRwSet().getMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */
      @java.lang.Override

      public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
          java.lang.String key,
          org.chainmaker.pb.common.Rwset.TxRWSet defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
            internalGetTxsRwSet().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */
      @java.lang.Override

      public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
            internalGetTxsRwSet().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTxsRwSet() {
        internalGetMutableTxsRwSet().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */

      public Builder removeTxsRwSet(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableTxsRwSet().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      getMutableTxsRwSet() {
        return internalGetMutableTxsRwSet().getMutableMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */
      public Builder putTxsRwSet(
          java.lang.String key,
          org.chainmaker.pb.common.Rwset.TxRWSet value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableTxsRwSet().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 4;</code>
       */

      public Builder putAllTxsRwSet(
          java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> values) {
        internalGetMutableTxsRwSet().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:consensus.VerifyResult)
    }

    // @@protoc_insertion_point(class_scope:consensus.VerifyResult)
    private static final org.chainmaker.pb.consensus.Consensus.VerifyResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.consensus.Consensus.VerifyResult();
    }

    public static org.chainmaker.pb.consensus.Consensus.VerifyResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<VerifyResult>
        PARSER = new com.google.protobuf.AbstractParser<VerifyResult>() {
      @java.lang.Override
      public VerifyResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VerifyResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<VerifyResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VerifyResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.VerifyResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProposalBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:consensus.ProposalBlock)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.common.Block block = 1;</code>
     * @return Whether the block field is set.
     */
    boolean hasBlock();
    /**
     * <code>.common.Block block = 1;</code>
     * @return The block.
     */
    org.chainmaker.pb.common.ChainmakerBlock.Block getBlock();
    /**
     * <code>.common.Block block = 1;</code>
     */
    org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getBlockOrBuilder();

    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    int getTxsRwSetCount();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    boolean containsTxsRwSet(
        java.lang.String key);
    /**
     * Use {@link #getTxsRwSetMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    getTxsRwSet();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    getTxsRwSetMap();
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */

    /* nullable */
org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
        java.lang.String key,
        /* nullable */
org.chainmaker.pb.common.Rwset.TxRWSet defaultValue);
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */

    org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code consensus.ProposalBlock}
   */
  public static final class ProposalBlock extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:consensus.ProposalBlock)
      ProposalBlockOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProposalBlock.newBuilder() to construct.
    private ProposalBlock(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProposalBlock() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProposalBlock();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProposalBlock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              org.chainmaker.pb.common.ChainmakerBlock.Block.Builder subBuilder = null;
              if (block_ != null) {
                subBuilder = block_.toBuilder();
              }
              block_ = input.readMessage(org.chainmaker.pb.common.ChainmakerBlock.Block.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(block_);
                block_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                txsRwSet_ = com.google.protobuf.MapField.newMapField(
                    TxsRwSetDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
              txsRwSet__ = input.readMessage(
                  TxsRwSetDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              txsRwSet_.getMutableMap().put(
                  txsRwSet__.getKey(), txsRwSet__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetTxsRwSet();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.consensus.Consensus.ProposalBlock.class, org.chainmaker.pb.consensus.Consensus.ProposalBlock.Builder.class);
    }

    public static final int BLOCK_FIELD_NUMBER = 1;
    private org.chainmaker.pb.common.ChainmakerBlock.Block block_;
    /**
     * <code>.common.Block block = 1;</code>
     * @return Whether the block field is set.
     */
    @java.lang.Override
    public boolean hasBlock() {
      return block_ != null;
    }
    /**
     * <code>.common.Block block = 1;</code>
     * @return The block.
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerBlock.Block getBlock() {
      return block_ == null ? org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : block_;
    }
    /**
     * <code>.common.Block block = 1;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getBlockOrBuilder() {
      return getBlock();
    }

    public static final int TXS_RW_SET_FIELD_NUMBER = 2;
    private static final class TxsRwSetDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>newDefaultInstance(
                  org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_TxsRwSetEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  org.chainmaker.pb.common.Rwset.TxRWSet.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> txsRwSet_;
    private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
    internalGetTxsRwSet() {
      if (txsRwSet_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TxsRwSetDefaultEntryHolder.defaultEntry);
      }
      return txsRwSet_;
    }

    public int getTxsRwSetCount() {
      return internalGetTxsRwSet().getMap().size();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */

    @java.lang.Override
    public boolean containsTxsRwSet(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTxsRwSet().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTxsRwSetMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSet() {
      return getTxsRwSetMap();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSetMap() {
      return internalGetTxsRwSet().getMap();
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    @java.lang.Override

    public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
        java.lang.String key,
        org.chainmaker.pb.common.Rwset.TxRWSet defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
          internalGetTxsRwSet().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
     */
    @java.lang.Override

    public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
          internalGetTxsRwSet().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (block_ != null) {
        output.writeMessage(1, getBlock());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTxsRwSet(),
          TxsRwSetDefaultEntryHolder.defaultEntry,
          2);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (block_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBlock());
      }
      for (java.util.Map.Entry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> entry
           : internalGetTxsRwSet().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
        txsRwSet__ = TxsRwSetDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, txsRwSet__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.consensus.Consensus.ProposalBlock)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.consensus.Consensus.ProposalBlock other = (org.chainmaker.pb.consensus.Consensus.ProposalBlock) obj;

      if (hasBlock() != other.hasBlock()) return false;
      if (hasBlock()) {
        if (!getBlock()
            .equals(other.getBlock())) return false;
      }
      if (!internalGetTxsRwSet().equals(
          other.internalGetTxsRwSet())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBlock()) {
        hash = (37 * hash) + BLOCK_FIELD_NUMBER;
        hash = (53 * hash) + getBlock().hashCode();
      }
      if (!internalGetTxsRwSet().getMap().isEmpty()) {
        hash = (37 * hash) + TXS_RW_SET_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTxsRwSet().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.consensus.Consensus.ProposalBlock prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code consensus.ProposalBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:consensus.ProposalBlock)
        org.chainmaker.pb.consensus.Consensus.ProposalBlockOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetTxsRwSet();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableTxsRwSet();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.consensus.Consensus.ProposalBlock.class, org.chainmaker.pb.consensus.Consensus.ProposalBlock.Builder.class);
      }

      // Construct using org.chainmaker.pb.consensus.Consensus.ProposalBlock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (blockBuilder_ == null) {
          block_ = null;
        } else {
          block_ = null;
          blockBuilder_ = null;
        }
        internalGetMutableTxsRwSet().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_ProposalBlock_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.ProposalBlock getDefaultInstanceForType() {
        return org.chainmaker.pb.consensus.Consensus.ProposalBlock.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.ProposalBlock build() {
        org.chainmaker.pb.consensus.Consensus.ProposalBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.ProposalBlock buildPartial() {
        org.chainmaker.pb.consensus.Consensus.ProposalBlock result = new org.chainmaker.pb.consensus.Consensus.ProposalBlock(this);
        int from_bitField0_ = bitField0_;
        if (blockBuilder_ == null) {
          result.block_ = block_;
        } else {
          result.block_ = blockBuilder_.build();
        }
        result.txsRwSet_ = internalGetTxsRwSet();
        result.txsRwSet_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.consensus.Consensus.ProposalBlock) {
          return mergeFrom((org.chainmaker.pb.consensus.Consensus.ProposalBlock)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.consensus.Consensus.ProposalBlock other) {
        if (other == org.chainmaker.pb.consensus.Consensus.ProposalBlock.getDefaultInstance()) return this;
        if (other.hasBlock()) {
          mergeBlock(other.getBlock());
        }
        internalGetMutableTxsRwSet().mergeFrom(
            other.internalGetTxsRwSet());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.consensus.Consensus.ProposalBlock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.consensus.Consensus.ProposalBlock) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.chainmaker.pb.common.ChainmakerBlock.Block block_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder> blockBuilder_;
      /**
       * <code>.common.Block block = 1;</code>
       * @return Whether the block field is set.
       */
      public boolean hasBlock() {
        return blockBuilder_ != null || block_ != null;
      }
      /**
       * <code>.common.Block block = 1;</code>
       * @return The block.
       */
      public org.chainmaker.pb.common.ChainmakerBlock.Block getBlock() {
        if (blockBuilder_ == null) {
          return block_ == null ? org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : block_;
        } else {
          return blockBuilder_.getMessage();
        }
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public Builder setBlock(org.chainmaker.pb.common.ChainmakerBlock.Block value) {
        if (blockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          block_ = value;
          onChanged();
        } else {
          blockBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public Builder setBlock(
          org.chainmaker.pb.common.ChainmakerBlock.Block.Builder builderForValue) {
        if (blockBuilder_ == null) {
          block_ = builderForValue.build();
          onChanged();
        } else {
          blockBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public Builder mergeBlock(org.chainmaker.pb.common.ChainmakerBlock.Block value) {
        if (blockBuilder_ == null) {
          if (block_ != null) {
            block_ =
              org.chainmaker.pb.common.ChainmakerBlock.Block.newBuilder(block_).mergeFrom(value).buildPartial();
          } else {
            block_ = value;
          }
          onChanged();
        } else {
          blockBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public Builder clearBlock() {
        if (blockBuilder_ == null) {
          block_ = null;
          onChanged();
        } else {
          block_ = null;
          blockBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public org.chainmaker.pb.common.ChainmakerBlock.Block.Builder getBlockBuilder() {
        
        onChanged();
        return getBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      public org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder getBlockOrBuilder() {
        if (blockBuilder_ != null) {
          return blockBuilder_.getMessageOrBuilder();
        } else {
          return block_ == null ?
              org.chainmaker.pb.common.ChainmakerBlock.Block.getDefaultInstance() : block_;
        }
      }
      /**
       * <code>.common.Block block = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder> 
          getBlockFieldBuilder() {
        if (blockBuilder_ == null) {
          blockBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chainmaker.pb.common.ChainmakerBlock.Block, org.chainmaker.pb.common.ChainmakerBlock.Block.Builder, org.chainmaker.pb.common.ChainmakerBlock.BlockOrBuilder>(
                  getBlock(),
                  getParentForChildren(),
                  isClean());
          block_ = null;
        }
        return blockBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> txsRwSet_;
      private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      internalGetTxsRwSet() {
        if (txsRwSet_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TxsRwSetDefaultEntryHolder.defaultEntry);
        }
        return txsRwSet_;
      }
      private com.google.protobuf.MapField<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      internalGetMutableTxsRwSet() {
        onChanged();;
        if (txsRwSet_ == null) {
          txsRwSet_ = com.google.protobuf.MapField.newMapField(
              TxsRwSetDefaultEntryHolder.defaultEntry);
        }
        if (!txsRwSet_.isMutable()) {
          txsRwSet_ = txsRwSet_.copy();
        }
        return txsRwSet_;
      }

      public int getTxsRwSetCount() {
        return internalGetTxsRwSet().getMap().size();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */

      @java.lang.Override
      public boolean containsTxsRwSet(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetTxsRwSet().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTxsRwSetMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSet() {
        return getTxsRwSetMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> getTxsRwSetMap() {
        return internalGetTxsRwSet().getMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */
      @java.lang.Override

      public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrDefault(
          java.lang.String key,
          org.chainmaker.pb.common.Rwset.TxRWSet defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
            internalGetTxsRwSet().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */
      @java.lang.Override

      public org.chainmaker.pb.common.Rwset.TxRWSet getTxsRwSetOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> map =
            internalGetTxsRwSet().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTxsRwSet() {
        internalGetMutableTxsRwSet().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */

      public Builder removeTxsRwSet(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableTxsRwSet().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet>
      getMutableTxsRwSet() {
        return internalGetMutableTxsRwSet().getMutableMap();
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */
      public Builder putTxsRwSet(
          java.lang.String key,
          org.chainmaker.pb.common.Rwset.TxRWSet value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableTxsRwSet().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, .common.TxRWSet&gt; txs_rw_set = 2;</code>
       */

      public Builder putAllTxsRwSet(
          java.util.Map<java.lang.String, org.chainmaker.pb.common.Rwset.TxRWSet> values) {
        internalGetMutableTxsRwSet().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:consensus.ProposalBlock)
    }

    // @@protoc_insertion_point(class_scope:consensus.ProposalBlock)
    private static final org.chainmaker.pb.consensus.Consensus.ProposalBlock DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.consensus.Consensus.ProposalBlock();
    }

    public static org.chainmaker.pb.consensus.Consensus.ProposalBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProposalBlock>
        PARSER = new com.google.protobuf.AbstractParser<ProposalBlock>() {
      @java.lang.Override
      public ProposalBlock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProposalBlock(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProposalBlock> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProposalBlock> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.ProposalBlock getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BlockHeaderConsensusArgsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:consensus.BlockHeaderConsensusArgs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 consensus_type = 1;</code>
     * @return The consensusType.
     */
    long getConsensusType();

    /**
     * <pre>
     * bytes consensus_data = 2;
     * </pre>
     *
     * <code>uint64 round = 3;</code>
     * @return The round.
     */
    long getRound();

    /**
     * <code>uint64 level = 4;</code>
     * @return The level.
     */
    long getLevel();

    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     * @return Whether the consensusData field is set.
     */
    boolean hasConsensusData();
    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     * @return The consensusData.
     */
    org.chainmaker.pb.common.Rwset.TxRWSet getConsensusData();
    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     */
    org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder getConsensusDataOrBuilder();
  }
  /**
   * Protobuf type {@code consensus.BlockHeaderConsensusArgs}
   */
  public static final class BlockHeaderConsensusArgs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:consensus.BlockHeaderConsensusArgs)
      BlockHeaderConsensusArgsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BlockHeaderConsensusArgs.newBuilder() to construct.
    private BlockHeaderConsensusArgs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BlockHeaderConsensusArgs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BlockHeaderConsensusArgs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BlockHeaderConsensusArgs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              consensusType_ = input.readInt64();
              break;
            }
            case 24: {

              round_ = input.readUInt64();
              break;
            }
            case 32: {

              level_ = input.readUInt64();
              break;
            }
            case 42: {
              org.chainmaker.pb.common.Rwset.TxRWSet.Builder subBuilder = null;
              if (consensusData_ != null) {
                subBuilder = consensusData_.toBuilder();
              }
              consensusData_ = input.readMessage(org.chainmaker.pb.common.Rwset.TxRWSet.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(consensusData_);
                consensusData_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_BlockHeaderConsensusArgs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_BlockHeaderConsensusArgs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.class, org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.Builder.class);
    }

    public static final int CONSENSUS_TYPE_FIELD_NUMBER = 1;
    private long consensusType_;
    /**
     * <code>int64 consensus_type = 1;</code>
     * @return The consensusType.
     */
    @java.lang.Override
    public long getConsensusType() {
      return consensusType_;
    }

    public static final int ROUND_FIELD_NUMBER = 3;
    private long round_;
    /**
     * <pre>
     * bytes consensus_data = 2;
     * </pre>
     *
     * <code>uint64 round = 3;</code>
     * @return The round.
     */
    @java.lang.Override
    public long getRound() {
      return round_;
    }

    public static final int LEVEL_FIELD_NUMBER = 4;
    private long level_;
    /**
     * <code>uint64 level = 4;</code>
     * @return The level.
     */
    @java.lang.Override
    public long getLevel() {
      return level_;
    }

    public static final int CONSENSUS_DATA_FIELD_NUMBER = 5;
    private org.chainmaker.pb.common.Rwset.TxRWSet consensusData_;
    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     * @return Whether the consensusData field is set.
     */
    @java.lang.Override
    public boolean hasConsensusData() {
      return consensusData_ != null;
    }
    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     * @return The consensusData.
     */
    @java.lang.Override
    public org.chainmaker.pb.common.Rwset.TxRWSet getConsensusData() {
      return consensusData_ == null ? org.chainmaker.pb.common.Rwset.TxRWSet.getDefaultInstance() : consensusData_;
    }
    /**
     * <code>.common.TxRWSet consensus_data = 5;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder getConsensusDataOrBuilder() {
      return getConsensusData();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (consensusType_ != 0L) {
        output.writeInt64(1, consensusType_);
      }
      if (round_ != 0L) {
        output.writeUInt64(3, round_);
      }
      if (level_ != 0L) {
        output.writeUInt64(4, level_);
      }
      if (consensusData_ != null) {
        output.writeMessage(5, getConsensusData());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (consensusType_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, consensusType_);
      }
      if (round_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, round_);
      }
      if (level_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, level_);
      }
      if (consensusData_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getConsensusData());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs other = (org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs) obj;

      if (getConsensusType()
          != other.getConsensusType()) return false;
      if (getRound()
          != other.getRound()) return false;
      if (getLevel()
          != other.getLevel()) return false;
      if (hasConsensusData() != other.hasConsensusData()) return false;
      if (hasConsensusData()) {
        if (!getConsensusData()
            .equals(other.getConsensusData())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONSENSUS_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getConsensusType());
      hash = (37 * hash) + ROUND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRound());
      hash = (37 * hash) + LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLevel());
      if (hasConsensusData()) {
        hash = (37 * hash) + CONSENSUS_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getConsensusData().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code consensus.BlockHeaderConsensusArgs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:consensus.BlockHeaderConsensusArgs)
        org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_BlockHeaderConsensusArgs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_BlockHeaderConsensusArgs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.class, org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.Builder.class);
      }

      // Construct using org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        consensusType_ = 0L;

        round_ = 0L;

        level_ = 0L;

        if (consensusDataBuilder_ == null) {
          consensusData_ = null;
        } else {
          consensusData_ = null;
          consensusDataBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_BlockHeaderConsensusArgs_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs getDefaultInstanceForType() {
        return org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs build() {
        org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs buildPartial() {
        org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs result = new org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs(this);
        result.consensusType_ = consensusType_;
        result.round_ = round_;
        result.level_ = level_;
        if (consensusDataBuilder_ == null) {
          result.consensusData_ = consensusData_;
        } else {
          result.consensusData_ = consensusDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs) {
          return mergeFrom((org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs other) {
        if (other == org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs.getDefaultInstance()) return this;
        if (other.getConsensusType() != 0L) {
          setConsensusType(other.getConsensusType());
        }
        if (other.getRound() != 0L) {
          setRound(other.getRound());
        }
        if (other.getLevel() != 0L) {
          setLevel(other.getLevel());
        }
        if (other.hasConsensusData()) {
          mergeConsensusData(other.getConsensusData());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long consensusType_ ;
      /**
       * <code>int64 consensus_type = 1;</code>
       * @return The consensusType.
       */
      @java.lang.Override
      public long getConsensusType() {
        return consensusType_;
      }
      /**
       * <code>int64 consensus_type = 1;</code>
       * @param value The consensusType to set.
       * @return This builder for chaining.
       */
      public Builder setConsensusType(long value) {
        
        consensusType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 consensus_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConsensusType() {
        
        consensusType_ = 0L;
        onChanged();
        return this;
      }

      private long round_ ;
      /**
       * <pre>
       * bytes consensus_data = 2;
       * </pre>
       *
       * <code>uint64 round = 3;</code>
       * @return The round.
       */
      @java.lang.Override
      public long getRound() {
        return round_;
      }
      /**
       * <pre>
       * bytes consensus_data = 2;
       * </pre>
       *
       * <code>uint64 round = 3;</code>
       * @param value The round to set.
       * @return This builder for chaining.
       */
      public Builder setRound(long value) {
        
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bytes consensus_data = 2;
       * </pre>
       *
       * <code>uint64 round = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRound() {
        
        round_ = 0L;
        onChanged();
        return this;
      }

      private long level_ ;
      /**
       * <code>uint64 level = 4;</code>
       * @return The level.
       */
      @java.lang.Override
      public long getLevel() {
        return level_;
      }
      /**
       * <code>uint64 level = 4;</code>
       * @param value The level to set.
       * @return This builder for chaining.
       */
      public Builder setLevel(long value) {
        
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 level = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLevel() {
        
        level_ = 0L;
        onChanged();
        return this;
      }

      private org.chainmaker.pb.common.Rwset.TxRWSet consensusData_;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.Rwset.TxRWSet, org.chainmaker.pb.common.Rwset.TxRWSet.Builder, org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder> consensusDataBuilder_;
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       * @return Whether the consensusData field is set.
       */
      public boolean hasConsensusData() {
        return consensusDataBuilder_ != null || consensusData_ != null;
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       * @return The consensusData.
       */
      public org.chainmaker.pb.common.Rwset.TxRWSet getConsensusData() {
        if (consensusDataBuilder_ == null) {
          return consensusData_ == null ? org.chainmaker.pb.common.Rwset.TxRWSet.getDefaultInstance() : consensusData_;
        } else {
          return consensusDataBuilder_.getMessage();
        }
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public Builder setConsensusData(org.chainmaker.pb.common.Rwset.TxRWSet value) {
        if (consensusDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          consensusData_ = value;
          onChanged();
        } else {
          consensusDataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public Builder setConsensusData(
          org.chainmaker.pb.common.Rwset.TxRWSet.Builder builderForValue) {
        if (consensusDataBuilder_ == null) {
          consensusData_ = builderForValue.build();
          onChanged();
        } else {
          consensusDataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public Builder mergeConsensusData(org.chainmaker.pb.common.Rwset.TxRWSet value) {
        if (consensusDataBuilder_ == null) {
          if (consensusData_ != null) {
            consensusData_ =
              org.chainmaker.pb.common.Rwset.TxRWSet.newBuilder(consensusData_).mergeFrom(value).buildPartial();
          } else {
            consensusData_ = value;
          }
          onChanged();
        } else {
          consensusDataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public Builder clearConsensusData() {
        if (consensusDataBuilder_ == null) {
          consensusData_ = null;
          onChanged();
        } else {
          consensusData_ = null;
          consensusDataBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public org.chainmaker.pb.common.Rwset.TxRWSet.Builder getConsensusDataBuilder() {
        
        onChanged();
        return getConsensusDataFieldBuilder().getBuilder();
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      public org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder getConsensusDataOrBuilder() {
        if (consensusDataBuilder_ != null) {
          return consensusDataBuilder_.getMessageOrBuilder();
        } else {
          return consensusData_ == null ?
              org.chainmaker.pb.common.Rwset.TxRWSet.getDefaultInstance() : consensusData_;
        }
      }
      /**
       * <code>.common.TxRWSet consensus_data = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.chainmaker.pb.common.Rwset.TxRWSet, org.chainmaker.pb.common.Rwset.TxRWSet.Builder, org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder> 
          getConsensusDataFieldBuilder() {
        if (consensusDataBuilder_ == null) {
          consensusDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.chainmaker.pb.common.Rwset.TxRWSet, org.chainmaker.pb.common.Rwset.TxRWSet.Builder, org.chainmaker.pb.common.Rwset.TxRWSetOrBuilder>(
                  getConsensusData(),
                  getParentForChildren(),
                  isClean());
          consensusData_ = null;
        }
        return consensusDataBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:consensus.BlockHeaderConsensusArgs)
    }

    // @@protoc_insertion_point(class_scope:consensus.BlockHeaderConsensusArgs)
    private static final org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs();
    }

    public static org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BlockHeaderConsensusArgs>
        PARSER = new com.google.protobuf.AbstractParser<BlockHeaderConsensusArgs>() {
      @java.lang.Override
      public BlockHeaderConsensusArgs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlockHeaderConsensusArgs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BlockHeaderConsensusArgs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BlockHeaderConsensusArgs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.BlockHeaderConsensusArgs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GovernanceMemberOrBuilder extends
      // @@protoc_insertion_point(interface_extends:consensus.GovernanceMember)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string node_id = 1;</code>
     * @return The nodeId.
     */
    java.lang.String getNodeId();
    /**
     * <code>string node_id = 1;</code>
     * @return The bytes for nodeId.
     */
    com.google.protobuf.ByteString
        getNodeIdBytes();

    /**
     * <code>int64 index = 2;</code>
     * @return The index.
     */
    long getIndex();
  }
  /**
   * Protobuf type {@code consensus.GovernanceMember}
   */
  public static final class GovernanceMember extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:consensus.GovernanceMember)
      GovernanceMemberOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GovernanceMember.newBuilder() to construct.
    private GovernanceMember(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GovernanceMember() {
      nodeId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GovernanceMember();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GovernanceMember(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              nodeId_ = s;
              break;
            }
            case 16: {

              index_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceMember_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceMember_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.consensus.Consensus.GovernanceMember.class, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder.class);
    }

    public static final int NODE_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object nodeId_;
    /**
     * <code>string node_id = 1;</code>
     * @return The nodeId.
     */
    @java.lang.Override
    public java.lang.String getNodeId() {
      java.lang.Object ref = nodeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodeId_ = s;
        return s;
      }
    }
    /**
     * <code>string node_id = 1;</code>
     * @return The bytes for nodeId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNodeIdBytes() {
      java.lang.Object ref = nodeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private long index_;
    /**
     * <code>int64 index = 2;</code>
     * @return The index.
     */
    @java.lang.Override
    public long getIndex() {
      return index_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodeId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nodeId_);
      }
      if (index_ != 0L) {
        output.writeInt64(2, index_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodeId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nodeId_);
      }
      if (index_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, index_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.consensus.Consensus.GovernanceMember)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.consensus.Consensus.GovernanceMember other = (org.chainmaker.pb.consensus.Consensus.GovernanceMember) obj;

      if (!getNodeId()
          .equals(other.getNodeId())) return false;
      if (getIndex()
          != other.getIndex()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NODE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getNodeId().hashCode();
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getIndex());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.consensus.Consensus.GovernanceMember prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code consensus.GovernanceMember}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:consensus.GovernanceMember)
        org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceMember_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceMember_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.consensus.Consensus.GovernanceMember.class, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder.class);
      }

      // Construct using org.chainmaker.pb.consensus.Consensus.GovernanceMember.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        nodeId_ = "";

        index_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceMember_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember getDefaultInstanceForType() {
        return org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember build() {
        org.chainmaker.pb.consensus.Consensus.GovernanceMember result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember buildPartial() {
        org.chainmaker.pb.consensus.Consensus.GovernanceMember result = new org.chainmaker.pb.consensus.Consensus.GovernanceMember(this);
        result.nodeId_ = nodeId_;
        result.index_ = index_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.consensus.Consensus.GovernanceMember) {
          return mergeFrom((org.chainmaker.pb.consensus.Consensus.GovernanceMember)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.consensus.Consensus.GovernanceMember other) {
        if (other == org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance()) return this;
        if (!other.getNodeId().isEmpty()) {
          nodeId_ = other.nodeId_;
          onChanged();
        }
        if (other.getIndex() != 0L) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.consensus.Consensus.GovernanceMember parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.consensus.Consensus.GovernanceMember) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object nodeId_ = "";
      /**
       * <code>string node_id = 1;</code>
       * @return The nodeId.
       */
      public java.lang.String getNodeId() {
        java.lang.Object ref = nodeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nodeId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string node_id = 1;</code>
       * @return The bytes for nodeId.
       */
      public com.google.protobuf.ByteString
          getNodeIdBytes() {
        java.lang.Object ref = nodeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nodeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string node_id = 1;</code>
       * @param value The nodeId to set.
       * @return This builder for chaining.
       */
      public Builder setNodeId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        nodeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string node_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNodeId() {
        
        nodeId_ = getDefaultInstance().getNodeId();
        onChanged();
        return this;
      }
      /**
       * <code>string node_id = 1;</code>
       * @param value The bytes for nodeId to set.
       * @return This builder for chaining.
       */
      public Builder setNodeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        nodeId_ = value;
        onChanged();
        return this;
      }

      private long index_ ;
      /**
       * <code>int64 index = 2;</code>
       * @return The index.
       */
      @java.lang.Override
      public long getIndex() {
        return index_;
      }
      /**
       * <code>int64 index = 2;</code>
       * @param value The index to set.
       * @return This builder for chaining.
       */
      public Builder setIndex(long value) {
        
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndex() {
        
        index_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:consensus.GovernanceMember)
    }

    // @@protoc_insertion_point(class_scope:consensus.GovernanceMember)
    private static final org.chainmaker.pb.consensus.Consensus.GovernanceMember DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.consensus.Consensus.GovernanceMember();
    }

    public static org.chainmaker.pb.consensus.Consensus.GovernanceMember getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GovernanceMember>
        PARSER = new com.google.protobuf.AbstractParser<GovernanceMember>() {
      @java.lang.Override
      public GovernanceMember parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GovernanceMember(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GovernanceMember> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GovernanceMember> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMember getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GovernanceContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:consensus.GovernanceContract)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *epoch id，increase by epoch switch
     * </pre>
     *
     * <code>uint64 epoch_id = 1;</code>
     * @return The epochId.
     */
    long getEpochId();

    /**
     * <pre>
     *consensus type
     * </pre>
     *
     * <code>.consensus.ConsensusType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     *consensus type
     * </pre>
     *
     * <code>.consensus.ConsensusType type = 2;</code>
     * @return The type.
     */
    org.chainmaker.pb.consensus.Consensus.ConsensusType getType();

    /**
     * <pre>
     *current index to be assigned
     * </pre>
     *
     * <code>int64 cur_max_index = 3;</code>
     * @return The curMaxIndex.
     */
    long getCurMaxIndex();

    /**
     * <code>bool skip_timeout_commit = 4;</code>
     * @return The skipTimeoutCommit.
     */
    boolean getSkipTimeoutCommit();

    /**
     * <pre>
     *bool is_config_chg = 4;   //is the configuration changed
     *bool is_validator_chg = 5;    //is the validator changed
     * </pre>
     *
     * <code>uint64 config_sequence = 6;</code>
     * @return The configSequence.
     */
    long getConfigSequence();

    /**
     * <pre>
     *number of nodes participating in the consensus
     * </pre>
     *
     * <code>uint64 n = 7;</code>
     * @return The n.
     */
    long getN();

    /**
     * <pre>
     *the minimum number of consensus nodes that need to survive
     * </pre>
     *
     * <code>uint64 min_quorum_for_qc = 8;</code>
     * @return The minQuorumForQc.
     */
    long getMinQuorumForQc();

    /**
     * <code>uint64 cached_len = 9;</code>
     * @return The cachedLen.
     */
    long getCachedLen();

    /**
     * <pre>
     *the next height of switching validator
     * </pre>
     *
     * <code>uint64 next_switch_height = 10;</code>
     * @return The nextSwitchHeight.
     */
    long getNextSwitchHeight();

    /**
     * <pre>
     *the buffer height of switching validator
     * </pre>
     *
     * <code>uint64 transit_block = 11;</code>
     * @return The transitBlock.
     */
    long getTransitBlock();

    /**
     * <pre>
     *cycle of switching validator
     * </pre>
     *
     * <code>uint64 block_num_per_epoch = 12;</code>
     * @return The blockNumPerEpoch.
     */
    long getBlockNumPerEpoch();

    /**
     * <pre>
     *maximum number of participating validators
     * </pre>
     *
     * <code>uint64 validator_num = 13;</code>
     * @return The validatorNum.
     */
    long getValidatorNum();

    /**
     * <pre>
     *the rounds in which each validator can produce blocks continuously
     * </pre>
     *
     * <code>uint64 node_propose_round = 14;</code>
     * @return The nodeProposeRound.
     */
    long getNodeProposeRound();

    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> 
        getMembersList();
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMember getMembers(int index);
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    int getMembersCount();
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getMembersOrBuilderList();
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getMembersOrBuilder(
        int index);

    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> 
        getValidatorsList();
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMember getValidators(int index);
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    int getValidatorsCount();
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getValidatorsOrBuilderList();
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getValidatorsOrBuilder(
        int index);

    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> 
        getNextValidatorsList();
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMember getNextValidators(int index);
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    int getNextValidatorsCount();
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getNextValidatorsOrBuilderList();
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getNextValidatorsOrBuilder(
        int index);

    /**
     * <pre>
     *the last epoch minimum number of consensus nodes that need to survive
     * </pre>
     *
     * <code>uint64 last_min_quorum_for_qc = 18;</code>
     * @return The lastMinQuorumForQc.
     */
    long getLastMinQuorumForQc();

    /**
     * <pre>
     *The base timeout for viewChange
     * </pre>
     *
     * <code>uint64 maxbft_round_timeout_mill = 19;</code>
     * @return The maxbftRoundTimeoutMill.
     */
    long getMaxbftRoundTimeoutMill();

    /**
     * <pre>
     *The delta timeout for the viewChange
     * </pre>
     *
     * <code>uint64 maxbft_round_timeout_interval_mill = 20;</code>
     * @return The maxbftRoundTimeoutIntervalMill.
     */
    long getMaxbftRoundTimeoutIntervalMill();

    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> 
        getLastValidatorsList();
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMember getLastValidators(int index);
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    int getLastValidatorsCount();
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getLastValidatorsOrBuilderList();
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getLastValidatorsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code consensus.GovernanceContract}
   */
  public static final class GovernanceContract extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:consensus.GovernanceContract)
      GovernanceContractOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GovernanceContract.newBuilder() to construct.
    private GovernanceContract(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GovernanceContract() {
      type_ = 0;
      members_ = java.util.Collections.emptyList();
      validators_ = java.util.Collections.emptyList();
      nextValidators_ = java.util.Collections.emptyList();
      lastValidators_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GovernanceContract();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GovernanceContract(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              epochId_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 24: {

              curMaxIndex_ = input.readInt64();
              break;
            }
            case 32: {

              skipTimeoutCommit_ = input.readBool();
              break;
            }
            case 48: {

              configSequence_ = input.readUInt64();
              break;
            }
            case 56: {

              n_ = input.readUInt64();
              break;
            }
            case 64: {

              minQuorumForQc_ = input.readUInt64();
              break;
            }
            case 72: {

              cachedLen_ = input.readUInt64();
              break;
            }
            case 80: {

              nextSwitchHeight_ = input.readUInt64();
              break;
            }
            case 88: {

              transitBlock_ = input.readUInt64();
              break;
            }
            case 96: {

              blockNumPerEpoch_ = input.readUInt64();
              break;
            }
            case 104: {

              validatorNum_ = input.readUInt64();
              break;
            }
            case 112: {

              nodeProposeRound_ = input.readUInt64();
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                members_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>();
                mutable_bitField0_ |= 0x00000001;
              }
              members_.add(
                  input.readMessage(org.chainmaker.pb.consensus.Consensus.GovernanceMember.parser(), extensionRegistry));
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                validators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>();
                mutable_bitField0_ |= 0x00000002;
              }
              validators_.add(
                  input.readMessage(org.chainmaker.pb.consensus.Consensus.GovernanceMember.parser(), extensionRegistry));
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                nextValidators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>();
                mutable_bitField0_ |= 0x00000004;
              }
              nextValidators_.add(
                  input.readMessage(org.chainmaker.pb.consensus.Consensus.GovernanceMember.parser(), extensionRegistry));
              break;
            }
            case 144: {

              lastMinQuorumForQc_ = input.readUInt64();
              break;
            }
            case 152: {

              maxbftRoundTimeoutMill_ = input.readUInt64();
              break;
            }
            case 160: {

              maxbftRoundTimeoutIntervalMill_ = input.readUInt64();
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                lastValidators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>();
                mutable_bitField0_ |= 0x00000008;
              }
              lastValidators_.add(
                  input.readMessage(org.chainmaker.pb.consensus.Consensus.GovernanceMember.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          members_ = java.util.Collections.unmodifiableList(members_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          validators_ = java.util.Collections.unmodifiableList(validators_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          nextValidators_ = java.util.Collections.unmodifiableList(nextValidators_);
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          lastValidators_ = java.util.Collections.unmodifiableList(lastValidators_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceContract_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceContract_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.consensus.Consensus.GovernanceContract.class, org.chainmaker.pb.consensus.Consensus.GovernanceContract.Builder.class);
    }

    public static final int EPOCH_ID_FIELD_NUMBER = 1;
    private long epochId_;
    /**
     * <pre>
     *epoch id，increase by epoch switch
     * </pre>
     *
     * <code>uint64 epoch_id = 1;</code>
     * @return The epochId.
     */
    @java.lang.Override
    public long getEpochId() {
      return epochId_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     *consensus type
     * </pre>
     *
     * <code>.consensus.ConsensusType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     *consensus type
     * </pre>
     *
     * <code>.consensus.ConsensusType type = 2;</code>
     * @return The type.
     */
    @java.lang.Override public org.chainmaker.pb.consensus.Consensus.ConsensusType getType() {
      @SuppressWarnings("deprecation")
      org.chainmaker.pb.consensus.Consensus.ConsensusType result = org.chainmaker.pb.consensus.Consensus.ConsensusType.valueOf(type_);
      return result == null ? org.chainmaker.pb.consensus.Consensus.ConsensusType.UNRECOGNIZED : result;
    }

    public static final int CUR_MAX_INDEX_FIELD_NUMBER = 3;
    private long curMaxIndex_;
    /**
     * <pre>
     *current index to be assigned
     * </pre>
     *
     * <code>int64 cur_max_index = 3;</code>
     * @return The curMaxIndex.
     */
    @java.lang.Override
    public long getCurMaxIndex() {
      return curMaxIndex_;
    }

    public static final int SKIP_TIMEOUT_COMMIT_FIELD_NUMBER = 4;
    private boolean skipTimeoutCommit_;
    /**
     * <code>bool skip_timeout_commit = 4;</code>
     * @return The skipTimeoutCommit.
     */
    @java.lang.Override
    public boolean getSkipTimeoutCommit() {
      return skipTimeoutCommit_;
    }

    public static final int CONFIG_SEQUENCE_FIELD_NUMBER = 6;
    private long configSequence_;
    /**
     * <pre>
     *bool is_config_chg = 4;   //is the configuration changed
     *bool is_validator_chg = 5;    //is the validator changed
     * </pre>
     *
     * <code>uint64 config_sequence = 6;</code>
     * @return The configSequence.
     */
    @java.lang.Override
    public long getConfigSequence() {
      return configSequence_;
    }

    public static final int N_FIELD_NUMBER = 7;
    private long n_;
    /**
     * <pre>
     *number of nodes participating in the consensus
     * </pre>
     *
     * <code>uint64 n = 7;</code>
     * @return The n.
     */
    @java.lang.Override
    public long getN() {
      return n_;
    }

    public static final int MIN_QUORUM_FOR_QC_FIELD_NUMBER = 8;
    private long minQuorumForQc_;
    /**
     * <pre>
     *the minimum number of consensus nodes that need to survive
     * </pre>
     *
     * <code>uint64 min_quorum_for_qc = 8;</code>
     * @return The minQuorumForQc.
     */
    @java.lang.Override
    public long getMinQuorumForQc() {
      return minQuorumForQc_;
    }

    public static final int CACHED_LEN_FIELD_NUMBER = 9;
    private long cachedLen_;
    /**
     * <code>uint64 cached_len = 9;</code>
     * @return The cachedLen.
     */
    @java.lang.Override
    public long getCachedLen() {
      return cachedLen_;
    }

    public static final int NEXT_SWITCH_HEIGHT_FIELD_NUMBER = 10;
    private long nextSwitchHeight_;
    /**
     * <pre>
     *the next height of switching validator
     * </pre>
     *
     * <code>uint64 next_switch_height = 10;</code>
     * @return The nextSwitchHeight.
     */
    @java.lang.Override
    public long getNextSwitchHeight() {
      return nextSwitchHeight_;
    }

    public static final int TRANSIT_BLOCK_FIELD_NUMBER = 11;
    private long transitBlock_;
    /**
     * <pre>
     *the buffer height of switching validator
     * </pre>
     *
     * <code>uint64 transit_block = 11;</code>
     * @return The transitBlock.
     */
    @java.lang.Override
    public long getTransitBlock() {
      return transitBlock_;
    }

    public static final int BLOCK_NUM_PER_EPOCH_FIELD_NUMBER = 12;
    private long blockNumPerEpoch_;
    /**
     * <pre>
     *cycle of switching validator
     * </pre>
     *
     * <code>uint64 block_num_per_epoch = 12;</code>
     * @return The blockNumPerEpoch.
     */
    @java.lang.Override
    public long getBlockNumPerEpoch() {
      return blockNumPerEpoch_;
    }

    public static final int VALIDATOR_NUM_FIELD_NUMBER = 13;
    private long validatorNum_;
    /**
     * <pre>
     *maximum number of participating validators
     * </pre>
     *
     * <code>uint64 validator_num = 13;</code>
     * @return The validatorNum.
     */
    @java.lang.Override
    public long getValidatorNum() {
      return validatorNum_;
    }

    public static final int NODE_PROPOSE_ROUND_FIELD_NUMBER = 14;
    private long nodeProposeRound_;
    /**
     * <pre>
     *the rounds in which each validator can produce blocks continuously
     * </pre>
     *
     * <code>uint64 node_propose_round = 14;</code>
     * @return The nodeProposeRound.
     */
    @java.lang.Override
    public long getNodeProposeRound() {
      return nodeProposeRound_;
    }

    public static final int MEMBERS_FIELD_NUMBER = 15;
    private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> members_;
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    @java.lang.Override
    public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getMembersList() {
      return members_;
    }
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getMembersOrBuilderList() {
      return members_;
    }
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    @java.lang.Override
    public int getMembersCount() {
      return members_.size();
    }
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMember getMembers(int index) {
      return members_.get(index);
    }
    /**
     * <pre>
     *currently maintained nodes
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember members = 15;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getMembersOrBuilder(
        int index) {
      return members_.get(index);
    }

    public static final int VALIDATORS_FIELD_NUMBER = 16;
    private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> validators_;
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    @java.lang.Override
    public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getValidatorsList() {
      return validators_;
    }
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getValidatorsOrBuilderList() {
      return validators_;
    }
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    @java.lang.Override
    public int getValidatorsCount() {
      return validators_.size();
    }
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMember getValidators(int index) {
      return validators_.get(index);
    }
    /**
     * <pre>
     *currently participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember validators = 16;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getValidatorsOrBuilder(
        int index) {
      return validators_.get(index);
    }

    public static final int NEXT_VALIDATORS_FIELD_NUMBER = 17;
    private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> nextValidators_;
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    @java.lang.Override
    public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getNextValidatorsList() {
      return nextValidators_;
    }
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getNextValidatorsOrBuilderList() {
      return nextValidators_;
    }
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    @java.lang.Override
    public int getNextValidatorsCount() {
      return nextValidators_.size();
    }
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMember getNextValidators(int index) {
      return nextValidators_.get(index);
    }
    /**
     * <pre>
     *next participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getNextValidatorsOrBuilder(
        int index) {
      return nextValidators_.get(index);
    }

    public static final int LAST_MIN_QUORUM_FOR_QC_FIELD_NUMBER = 18;
    private long lastMinQuorumForQc_;
    /**
     * <pre>
     *the last epoch minimum number of consensus nodes that need to survive
     * </pre>
     *
     * <code>uint64 last_min_quorum_for_qc = 18;</code>
     * @return The lastMinQuorumForQc.
     */
    @java.lang.Override
    public long getLastMinQuorumForQc() {
      return lastMinQuorumForQc_;
    }

    public static final int MAXBFT_ROUND_TIMEOUT_MILL_FIELD_NUMBER = 19;
    private long maxbftRoundTimeoutMill_;
    /**
     * <pre>
     *The base timeout for viewChange
     * </pre>
     *
     * <code>uint64 maxbft_round_timeout_mill = 19;</code>
     * @return The maxbftRoundTimeoutMill.
     */
    @java.lang.Override
    public long getMaxbftRoundTimeoutMill() {
      return maxbftRoundTimeoutMill_;
    }

    public static final int MAXBFT_ROUND_TIMEOUT_INTERVAL_MILL_FIELD_NUMBER = 20;
    private long maxbftRoundTimeoutIntervalMill_;
    /**
     * <pre>
     *The delta timeout for the viewChange
     * </pre>
     *
     * <code>uint64 maxbft_round_timeout_interval_mill = 20;</code>
     * @return The maxbftRoundTimeoutIntervalMill.
     */
    @java.lang.Override
    public long getMaxbftRoundTimeoutIntervalMill() {
      return maxbftRoundTimeoutIntervalMill_;
    }

    public static final int LAST_VALIDATORS_FIELD_NUMBER = 21;
    private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> lastValidators_;
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    @java.lang.Override
    public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getLastValidatorsList() {
      return lastValidators_;
    }
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
        getLastValidatorsOrBuilderList() {
      return lastValidators_;
    }
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    @java.lang.Override
    public int getLastValidatorsCount() {
      return lastValidators_.size();
    }
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMember getLastValidators(int index) {
      return lastValidators_.get(index);
    }
    /**
     * <pre>
     *last epoch participate validators
     * </pre>
     *
     * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getLastValidatorsOrBuilder(
        int index) {
      return lastValidators_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (epochId_ != 0L) {
        output.writeUInt64(1, epochId_);
      }
      if (type_ != org.chainmaker.pb.consensus.Consensus.ConsensusType.SOLO.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (curMaxIndex_ != 0L) {
        output.writeInt64(3, curMaxIndex_);
      }
      if (skipTimeoutCommit_ != false) {
        output.writeBool(4, skipTimeoutCommit_);
      }
      if (configSequence_ != 0L) {
        output.writeUInt64(6, configSequence_);
      }
      if (n_ != 0L) {
        output.writeUInt64(7, n_);
      }
      if (minQuorumForQc_ != 0L) {
        output.writeUInt64(8, minQuorumForQc_);
      }
      if (cachedLen_ != 0L) {
        output.writeUInt64(9, cachedLen_);
      }
      if (nextSwitchHeight_ != 0L) {
        output.writeUInt64(10, nextSwitchHeight_);
      }
      if (transitBlock_ != 0L) {
        output.writeUInt64(11, transitBlock_);
      }
      if (blockNumPerEpoch_ != 0L) {
        output.writeUInt64(12, blockNumPerEpoch_);
      }
      if (validatorNum_ != 0L) {
        output.writeUInt64(13, validatorNum_);
      }
      if (nodeProposeRound_ != 0L) {
        output.writeUInt64(14, nodeProposeRound_);
      }
      for (int i = 0; i < members_.size(); i++) {
        output.writeMessage(15, members_.get(i));
      }
      for (int i = 0; i < validators_.size(); i++) {
        output.writeMessage(16, validators_.get(i));
      }
      for (int i = 0; i < nextValidators_.size(); i++) {
        output.writeMessage(17, nextValidators_.get(i));
      }
      if (lastMinQuorumForQc_ != 0L) {
        output.writeUInt64(18, lastMinQuorumForQc_);
      }
      if (maxbftRoundTimeoutMill_ != 0L) {
        output.writeUInt64(19, maxbftRoundTimeoutMill_);
      }
      if (maxbftRoundTimeoutIntervalMill_ != 0L) {
        output.writeUInt64(20, maxbftRoundTimeoutIntervalMill_);
      }
      for (int i = 0; i < lastValidators_.size(); i++) {
        output.writeMessage(21, lastValidators_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (epochId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, epochId_);
      }
      if (type_ != org.chainmaker.pb.consensus.Consensus.ConsensusType.SOLO.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (curMaxIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, curMaxIndex_);
      }
      if (skipTimeoutCommit_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, skipTimeoutCommit_);
      }
      if (configSequence_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, configSequence_);
      }
      if (n_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, n_);
      }
      if (minQuorumForQc_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, minQuorumForQc_);
      }
      if (cachedLen_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, cachedLen_);
      }
      if (nextSwitchHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, nextSwitchHeight_);
      }
      if (transitBlock_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, transitBlock_);
      }
      if (blockNumPerEpoch_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, blockNumPerEpoch_);
      }
      if (validatorNum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(13, validatorNum_);
      }
      if (nodeProposeRound_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(14, nodeProposeRound_);
      }
      for (int i = 0; i < members_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, members_.get(i));
      }
      for (int i = 0; i < validators_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, validators_.get(i));
      }
      for (int i = 0; i < nextValidators_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, nextValidators_.get(i));
      }
      if (lastMinQuorumForQc_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(18, lastMinQuorumForQc_);
      }
      if (maxbftRoundTimeoutMill_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(19, maxbftRoundTimeoutMill_);
      }
      if (maxbftRoundTimeoutIntervalMill_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(20, maxbftRoundTimeoutIntervalMill_);
      }
      for (int i = 0; i < lastValidators_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, lastValidators_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.consensus.Consensus.GovernanceContract)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.consensus.Consensus.GovernanceContract other = (org.chainmaker.pb.consensus.Consensus.GovernanceContract) obj;

      if (getEpochId()
          != other.getEpochId()) return false;
      if (type_ != other.type_) return false;
      if (getCurMaxIndex()
          != other.getCurMaxIndex()) return false;
      if (getSkipTimeoutCommit()
          != other.getSkipTimeoutCommit()) return false;
      if (getConfigSequence()
          != other.getConfigSequence()) return false;
      if (getN()
          != other.getN()) return false;
      if (getMinQuorumForQc()
          != other.getMinQuorumForQc()) return false;
      if (getCachedLen()
          != other.getCachedLen()) return false;
      if (getNextSwitchHeight()
          != other.getNextSwitchHeight()) return false;
      if (getTransitBlock()
          != other.getTransitBlock()) return false;
      if (getBlockNumPerEpoch()
          != other.getBlockNumPerEpoch()) return false;
      if (getValidatorNum()
          != other.getValidatorNum()) return false;
      if (getNodeProposeRound()
          != other.getNodeProposeRound()) return false;
      if (!getMembersList()
          .equals(other.getMembersList())) return false;
      if (!getValidatorsList()
          .equals(other.getValidatorsList())) return false;
      if (!getNextValidatorsList()
          .equals(other.getNextValidatorsList())) return false;
      if (getLastMinQuorumForQc()
          != other.getLastMinQuorumForQc()) return false;
      if (getMaxbftRoundTimeoutMill()
          != other.getMaxbftRoundTimeoutMill()) return false;
      if (getMaxbftRoundTimeoutIntervalMill()
          != other.getMaxbftRoundTimeoutIntervalMill()) return false;
      if (!getLastValidatorsList()
          .equals(other.getLastValidatorsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EPOCH_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEpochId());
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + CUR_MAX_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCurMaxIndex());
      hash = (37 * hash) + SKIP_TIMEOUT_COMMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSkipTimeoutCommit());
      hash = (37 * hash) + CONFIG_SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getConfigSequence());
      hash = (37 * hash) + N_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getN());
      hash = (37 * hash) + MIN_QUORUM_FOR_QC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMinQuorumForQc());
      hash = (37 * hash) + CACHED_LEN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCachedLen());
      hash = (37 * hash) + NEXT_SWITCH_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextSwitchHeight());
      hash = (37 * hash) + TRANSIT_BLOCK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTransitBlock());
      hash = (37 * hash) + BLOCK_NUM_PER_EPOCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBlockNumPerEpoch());
      hash = (37 * hash) + VALIDATOR_NUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValidatorNum());
      hash = (37 * hash) + NODE_PROPOSE_ROUND_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNodeProposeRound());
      if (getMembersCount() > 0) {
        hash = (37 * hash) + MEMBERS_FIELD_NUMBER;
        hash = (53 * hash) + getMembersList().hashCode();
      }
      if (getValidatorsCount() > 0) {
        hash = (37 * hash) + VALIDATORS_FIELD_NUMBER;
        hash = (53 * hash) + getValidatorsList().hashCode();
      }
      if (getNextValidatorsCount() > 0) {
        hash = (37 * hash) + NEXT_VALIDATORS_FIELD_NUMBER;
        hash = (53 * hash) + getNextValidatorsList().hashCode();
      }
      hash = (37 * hash) + LAST_MIN_QUORUM_FOR_QC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLastMinQuorumForQc());
      hash = (37 * hash) + MAXBFT_ROUND_TIMEOUT_MILL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxbftRoundTimeoutMill());
      hash = (37 * hash) + MAXBFT_ROUND_TIMEOUT_INTERVAL_MILL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxbftRoundTimeoutIntervalMill());
      if (getLastValidatorsCount() > 0) {
        hash = (37 * hash) + LAST_VALIDATORS_FIELD_NUMBER;
        hash = (53 * hash) + getLastValidatorsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.consensus.Consensus.GovernanceContract prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code consensus.GovernanceContract}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:consensus.GovernanceContract)
        org.chainmaker.pb.consensus.Consensus.GovernanceContractOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceContract_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceContract_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.consensus.Consensus.GovernanceContract.class, org.chainmaker.pb.consensus.Consensus.GovernanceContract.Builder.class);
      }

      // Construct using org.chainmaker.pb.consensus.Consensus.GovernanceContract.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMembersFieldBuilder();
          getValidatorsFieldBuilder();
          getNextValidatorsFieldBuilder();
          getLastValidatorsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        epochId_ = 0L;

        type_ = 0;

        curMaxIndex_ = 0L;

        skipTimeoutCommit_ = false;

        configSequence_ = 0L;

        n_ = 0L;

        minQuorumForQc_ = 0L;

        cachedLen_ = 0L;

        nextSwitchHeight_ = 0L;

        transitBlock_ = 0L;

        blockNumPerEpoch_ = 0L;

        validatorNum_ = 0L;

        nodeProposeRound_ = 0L;

        if (membersBuilder_ == null) {
          members_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          membersBuilder_.clear();
        }
        if (validatorsBuilder_ == null) {
          validators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          validatorsBuilder_.clear();
        }
        if (nextValidatorsBuilder_ == null) {
          nextValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          nextValidatorsBuilder_.clear();
        }
        lastMinQuorumForQc_ = 0L;

        maxbftRoundTimeoutMill_ = 0L;

        maxbftRoundTimeoutIntervalMill_ = 0L;

        if (lastValidatorsBuilder_ == null) {
          lastValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          lastValidatorsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.consensus.Consensus.internal_static_consensus_GovernanceContract_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceContract getDefaultInstanceForType() {
        return org.chainmaker.pb.consensus.Consensus.GovernanceContract.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceContract build() {
        org.chainmaker.pb.consensus.Consensus.GovernanceContract result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.GovernanceContract buildPartial() {
        org.chainmaker.pb.consensus.Consensus.GovernanceContract result = new org.chainmaker.pb.consensus.Consensus.GovernanceContract(this);
        int from_bitField0_ = bitField0_;
        result.epochId_ = epochId_;
        result.type_ = type_;
        result.curMaxIndex_ = curMaxIndex_;
        result.skipTimeoutCommit_ = skipTimeoutCommit_;
        result.configSequence_ = configSequence_;
        result.n_ = n_;
        result.minQuorumForQc_ = minQuorumForQc_;
        result.cachedLen_ = cachedLen_;
        result.nextSwitchHeight_ = nextSwitchHeight_;
        result.transitBlock_ = transitBlock_;
        result.blockNumPerEpoch_ = blockNumPerEpoch_;
        result.validatorNum_ = validatorNum_;
        result.nodeProposeRound_ = nodeProposeRound_;
        if (membersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            members_ = java.util.Collections.unmodifiableList(members_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.members_ = members_;
        } else {
          result.members_ = membersBuilder_.build();
        }
        if (validatorsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            validators_ = java.util.Collections.unmodifiableList(validators_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.validators_ = validators_;
        } else {
          result.validators_ = validatorsBuilder_.build();
        }
        if (nextValidatorsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            nextValidators_ = java.util.Collections.unmodifiableList(nextValidators_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.nextValidators_ = nextValidators_;
        } else {
          result.nextValidators_ = nextValidatorsBuilder_.build();
        }
        result.lastMinQuorumForQc_ = lastMinQuorumForQc_;
        result.maxbftRoundTimeoutMill_ = maxbftRoundTimeoutMill_;
        result.maxbftRoundTimeoutIntervalMill_ = maxbftRoundTimeoutIntervalMill_;
        if (lastValidatorsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            lastValidators_ = java.util.Collections.unmodifiableList(lastValidators_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.lastValidators_ = lastValidators_;
        } else {
          result.lastValidators_ = lastValidatorsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.consensus.Consensus.GovernanceContract) {
          return mergeFrom((org.chainmaker.pb.consensus.Consensus.GovernanceContract)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.consensus.Consensus.GovernanceContract other) {
        if (other == org.chainmaker.pb.consensus.Consensus.GovernanceContract.getDefaultInstance()) return this;
        if (other.getEpochId() != 0L) {
          setEpochId(other.getEpochId());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getCurMaxIndex() != 0L) {
          setCurMaxIndex(other.getCurMaxIndex());
        }
        if (other.getSkipTimeoutCommit() != false) {
          setSkipTimeoutCommit(other.getSkipTimeoutCommit());
        }
        if (other.getConfigSequence() != 0L) {
          setConfigSequence(other.getConfigSequence());
        }
        if (other.getN() != 0L) {
          setN(other.getN());
        }
        if (other.getMinQuorumForQc() != 0L) {
          setMinQuorumForQc(other.getMinQuorumForQc());
        }
        if (other.getCachedLen() != 0L) {
          setCachedLen(other.getCachedLen());
        }
        if (other.getNextSwitchHeight() != 0L) {
          setNextSwitchHeight(other.getNextSwitchHeight());
        }
        if (other.getTransitBlock() != 0L) {
          setTransitBlock(other.getTransitBlock());
        }
        if (other.getBlockNumPerEpoch() != 0L) {
          setBlockNumPerEpoch(other.getBlockNumPerEpoch());
        }
        if (other.getValidatorNum() != 0L) {
          setValidatorNum(other.getValidatorNum());
        }
        if (other.getNodeProposeRound() != 0L) {
          setNodeProposeRound(other.getNodeProposeRound());
        }
        if (membersBuilder_ == null) {
          if (!other.members_.isEmpty()) {
            if (members_.isEmpty()) {
              members_ = other.members_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMembersIsMutable();
              members_.addAll(other.members_);
            }
            onChanged();
          }
        } else {
          if (!other.members_.isEmpty()) {
            if (membersBuilder_.isEmpty()) {
              membersBuilder_.dispose();
              membersBuilder_ = null;
              members_ = other.members_;
              bitField0_ = (bitField0_ & ~0x00000001);
              membersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMembersFieldBuilder() : null;
            } else {
              membersBuilder_.addAllMessages(other.members_);
            }
          }
        }
        if (validatorsBuilder_ == null) {
          if (!other.validators_.isEmpty()) {
            if (validators_.isEmpty()) {
              validators_ = other.validators_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValidatorsIsMutable();
              validators_.addAll(other.validators_);
            }
            onChanged();
          }
        } else {
          if (!other.validators_.isEmpty()) {
            if (validatorsBuilder_.isEmpty()) {
              validatorsBuilder_.dispose();
              validatorsBuilder_ = null;
              validators_ = other.validators_;
              bitField0_ = (bitField0_ & ~0x00000002);
              validatorsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValidatorsFieldBuilder() : null;
            } else {
              validatorsBuilder_.addAllMessages(other.validators_);
            }
          }
        }
        if (nextValidatorsBuilder_ == null) {
          if (!other.nextValidators_.isEmpty()) {
            if (nextValidators_.isEmpty()) {
              nextValidators_ = other.nextValidators_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureNextValidatorsIsMutable();
              nextValidators_.addAll(other.nextValidators_);
            }
            onChanged();
          }
        } else {
          if (!other.nextValidators_.isEmpty()) {
            if (nextValidatorsBuilder_.isEmpty()) {
              nextValidatorsBuilder_.dispose();
              nextValidatorsBuilder_ = null;
              nextValidators_ = other.nextValidators_;
              bitField0_ = (bitField0_ & ~0x00000004);
              nextValidatorsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNextValidatorsFieldBuilder() : null;
            } else {
              nextValidatorsBuilder_.addAllMessages(other.nextValidators_);
            }
          }
        }
        if (other.getLastMinQuorumForQc() != 0L) {
          setLastMinQuorumForQc(other.getLastMinQuorumForQc());
        }
        if (other.getMaxbftRoundTimeoutMill() != 0L) {
          setMaxbftRoundTimeoutMill(other.getMaxbftRoundTimeoutMill());
        }
        if (other.getMaxbftRoundTimeoutIntervalMill() != 0L) {
          setMaxbftRoundTimeoutIntervalMill(other.getMaxbftRoundTimeoutIntervalMill());
        }
        if (lastValidatorsBuilder_ == null) {
          if (!other.lastValidators_.isEmpty()) {
            if (lastValidators_.isEmpty()) {
              lastValidators_ = other.lastValidators_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureLastValidatorsIsMutable();
              lastValidators_.addAll(other.lastValidators_);
            }
            onChanged();
          }
        } else {
          if (!other.lastValidators_.isEmpty()) {
            if (lastValidatorsBuilder_.isEmpty()) {
              lastValidatorsBuilder_.dispose();
              lastValidatorsBuilder_ = null;
              lastValidators_ = other.lastValidators_;
              bitField0_ = (bitField0_ & ~0x00000008);
              lastValidatorsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLastValidatorsFieldBuilder() : null;
            } else {
              lastValidatorsBuilder_.addAllMessages(other.lastValidators_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.consensus.Consensus.GovernanceContract parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.consensus.Consensus.GovernanceContract) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long epochId_ ;
      /**
       * <pre>
       *epoch id，increase by epoch switch
       * </pre>
       *
       * <code>uint64 epoch_id = 1;</code>
       * @return The epochId.
       */
      @java.lang.Override
      public long getEpochId() {
        return epochId_;
      }
      /**
       * <pre>
       *epoch id，increase by epoch switch
       * </pre>
       *
       * <code>uint64 epoch_id = 1;</code>
       * @param value The epochId to set.
       * @return This builder for chaining.
       */
      public Builder setEpochId(long value) {
        
        epochId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *epoch id，increase by epoch switch
       * </pre>
       *
       * <code>uint64 epoch_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEpochId() {
        
        epochId_ = 0L;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       *consensus type
       * </pre>
       *
       * <code>.consensus.ConsensusType type = 2;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       *consensus type
       * </pre>
       *
       * <code>.consensus.ConsensusType type = 2;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *consensus type
       * </pre>
       *
       * <code>.consensus.ConsensusType type = 2;</code>
       * @return The type.
       */
      @java.lang.Override
      public org.chainmaker.pb.consensus.Consensus.ConsensusType getType() {
        @SuppressWarnings("deprecation")
        org.chainmaker.pb.consensus.Consensus.ConsensusType result = org.chainmaker.pb.consensus.Consensus.ConsensusType.valueOf(type_);
        return result == null ? org.chainmaker.pb.consensus.Consensus.ConsensusType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *consensus type
       * </pre>
       *
       * <code>.consensus.ConsensusType type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(org.chainmaker.pb.consensus.Consensus.ConsensusType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *consensus type
       * </pre>
       *
       * <code>.consensus.ConsensusType type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private long curMaxIndex_ ;
      /**
       * <pre>
       *current index to be assigned
       * </pre>
       *
       * <code>int64 cur_max_index = 3;</code>
       * @return The curMaxIndex.
       */
      @java.lang.Override
      public long getCurMaxIndex() {
        return curMaxIndex_;
      }
      /**
       * <pre>
       *current index to be assigned
       * </pre>
       *
       * <code>int64 cur_max_index = 3;</code>
       * @param value The curMaxIndex to set.
       * @return This builder for chaining.
       */
      public Builder setCurMaxIndex(long value) {
        
        curMaxIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *current index to be assigned
       * </pre>
       *
       * <code>int64 cur_max_index = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurMaxIndex() {
        
        curMaxIndex_ = 0L;
        onChanged();
        return this;
      }

      private boolean skipTimeoutCommit_ ;
      /**
       * <code>bool skip_timeout_commit = 4;</code>
       * @return The skipTimeoutCommit.
       */
      @java.lang.Override
      public boolean getSkipTimeoutCommit() {
        return skipTimeoutCommit_;
      }
      /**
       * <code>bool skip_timeout_commit = 4;</code>
       * @param value The skipTimeoutCommit to set.
       * @return This builder for chaining.
       */
      public Builder setSkipTimeoutCommit(boolean value) {
        
        skipTimeoutCommit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool skip_timeout_commit = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSkipTimeoutCommit() {
        
        skipTimeoutCommit_ = false;
        onChanged();
        return this;
      }

      private long configSequence_ ;
      /**
       * <pre>
       *bool is_config_chg = 4;   //is the configuration changed
       *bool is_validator_chg = 5;    //is the validator changed
       * </pre>
       *
       * <code>uint64 config_sequence = 6;</code>
       * @return The configSequence.
       */
      @java.lang.Override
      public long getConfigSequence() {
        return configSequence_;
      }
      /**
       * <pre>
       *bool is_config_chg = 4;   //is the configuration changed
       *bool is_validator_chg = 5;    //is the validator changed
       * </pre>
       *
       * <code>uint64 config_sequence = 6;</code>
       * @param value The configSequence to set.
       * @return This builder for chaining.
       */
      public Builder setConfigSequence(long value) {
        
        configSequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *bool is_config_chg = 4;   //is the configuration changed
       *bool is_validator_chg = 5;    //is the validator changed
       * </pre>
       *
       * <code>uint64 config_sequence = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearConfigSequence() {
        
        configSequence_ = 0L;
        onChanged();
        return this;
      }

      private long n_ ;
      /**
       * <pre>
       *number of nodes participating in the consensus
       * </pre>
       *
       * <code>uint64 n = 7;</code>
       * @return The n.
       */
      @java.lang.Override
      public long getN() {
        return n_;
      }
      /**
       * <pre>
       *number of nodes participating in the consensus
       * </pre>
       *
       * <code>uint64 n = 7;</code>
       * @param value The n to set.
       * @return This builder for chaining.
       */
      public Builder setN(long value) {
        
        n_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *number of nodes participating in the consensus
       * </pre>
       *
       * <code>uint64 n = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearN() {
        
        n_ = 0L;
        onChanged();
        return this;
      }

      private long minQuorumForQc_ ;
      /**
       * <pre>
       *the minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 min_quorum_for_qc = 8;</code>
       * @return The minQuorumForQc.
       */
      @java.lang.Override
      public long getMinQuorumForQc() {
        return minQuorumForQc_;
      }
      /**
       * <pre>
       *the minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 min_quorum_for_qc = 8;</code>
       * @param value The minQuorumForQc to set.
       * @return This builder for chaining.
       */
      public Builder setMinQuorumForQc(long value) {
        
        minQuorumForQc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *the minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 min_quorum_for_qc = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinQuorumForQc() {
        
        minQuorumForQc_ = 0L;
        onChanged();
        return this;
      }

      private long cachedLen_ ;
      /**
       * <code>uint64 cached_len = 9;</code>
       * @return The cachedLen.
       */
      @java.lang.Override
      public long getCachedLen() {
        return cachedLen_;
      }
      /**
       * <code>uint64 cached_len = 9;</code>
       * @param value The cachedLen to set.
       * @return This builder for chaining.
       */
      public Builder setCachedLen(long value) {
        
        cachedLen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 cached_len = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearCachedLen() {
        
        cachedLen_ = 0L;
        onChanged();
        return this;
      }

      private long nextSwitchHeight_ ;
      /**
       * <pre>
       *the next height of switching validator
       * </pre>
       *
       * <code>uint64 next_switch_height = 10;</code>
       * @return The nextSwitchHeight.
       */
      @java.lang.Override
      public long getNextSwitchHeight() {
        return nextSwitchHeight_;
      }
      /**
       * <pre>
       *the next height of switching validator
       * </pre>
       *
       * <code>uint64 next_switch_height = 10;</code>
       * @param value The nextSwitchHeight to set.
       * @return This builder for chaining.
       */
      public Builder setNextSwitchHeight(long value) {
        
        nextSwitchHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *the next height of switching validator
       * </pre>
       *
       * <code>uint64 next_switch_height = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearNextSwitchHeight() {
        
        nextSwitchHeight_ = 0L;
        onChanged();
        return this;
      }

      private long transitBlock_ ;
      /**
       * <pre>
       *the buffer height of switching validator
       * </pre>
       *
       * <code>uint64 transit_block = 11;</code>
       * @return The transitBlock.
       */
      @java.lang.Override
      public long getTransitBlock() {
        return transitBlock_;
      }
      /**
       * <pre>
       *the buffer height of switching validator
       * </pre>
       *
       * <code>uint64 transit_block = 11;</code>
       * @param value The transitBlock to set.
       * @return This builder for chaining.
       */
      public Builder setTransitBlock(long value) {
        
        transitBlock_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *the buffer height of switching validator
       * </pre>
       *
       * <code>uint64 transit_block = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransitBlock() {
        
        transitBlock_ = 0L;
        onChanged();
        return this;
      }

      private long blockNumPerEpoch_ ;
      /**
       * <pre>
       *cycle of switching validator
       * </pre>
       *
       * <code>uint64 block_num_per_epoch = 12;</code>
       * @return The blockNumPerEpoch.
       */
      @java.lang.Override
      public long getBlockNumPerEpoch() {
        return blockNumPerEpoch_;
      }
      /**
       * <pre>
       *cycle of switching validator
       * </pre>
       *
       * <code>uint64 block_num_per_epoch = 12;</code>
       * @param value The blockNumPerEpoch to set.
       * @return This builder for chaining.
       */
      public Builder setBlockNumPerEpoch(long value) {
        
        blockNumPerEpoch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *cycle of switching validator
       * </pre>
       *
       * <code>uint64 block_num_per_epoch = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlockNumPerEpoch() {
        
        blockNumPerEpoch_ = 0L;
        onChanged();
        return this;
      }

      private long validatorNum_ ;
      /**
       * <pre>
       *maximum number of participating validators
       * </pre>
       *
       * <code>uint64 validator_num = 13;</code>
       * @return The validatorNum.
       */
      @java.lang.Override
      public long getValidatorNum() {
        return validatorNum_;
      }
      /**
       * <pre>
       *maximum number of participating validators
       * </pre>
       *
       * <code>uint64 validator_num = 13;</code>
       * @param value The validatorNum to set.
       * @return This builder for chaining.
       */
      public Builder setValidatorNum(long value) {
        
        validatorNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *maximum number of participating validators
       * </pre>
       *
       * <code>uint64 validator_num = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearValidatorNum() {
        
        validatorNum_ = 0L;
        onChanged();
        return this;
      }

      private long nodeProposeRound_ ;
      /**
       * <pre>
       *the rounds in which each validator can produce blocks continuously
       * </pre>
       *
       * <code>uint64 node_propose_round = 14;</code>
       * @return The nodeProposeRound.
       */
      @java.lang.Override
      public long getNodeProposeRound() {
        return nodeProposeRound_;
      }
      /**
       * <pre>
       *the rounds in which each validator can produce blocks continuously
       * </pre>
       *
       * <code>uint64 node_propose_round = 14;</code>
       * @param value The nodeProposeRound to set.
       * @return This builder for chaining.
       */
      public Builder setNodeProposeRound(long value) {
        
        nodeProposeRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *the rounds in which each validator can produce blocks continuously
       * </pre>
       *
       * <code>uint64 node_propose_round = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearNodeProposeRound() {
        
        nodeProposeRound_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> members_ =
        java.util.Collections.emptyList();
      private void ensureMembersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          members_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>(members_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> membersBuilder_;

      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getMembersList() {
        if (membersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(members_);
        } else {
          return membersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public int getMembersCount() {
        if (membersBuilder_ == null) {
          return members_.size();
        } else {
          return membersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember getMembers(int index) {
        if (membersBuilder_ == null) {
          return members_.get(index);
        } else {
          return membersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder setMembers(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (membersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembersIsMutable();
          members_.set(index, value);
          onChanged();
        } else {
          membersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder setMembers(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (membersBuilder_ == null) {
          ensureMembersIsMutable();
          members_.set(index, builderForValue.build());
          onChanged();
        } else {
          membersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder addMembers(org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (membersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembersIsMutable();
          members_.add(value);
          onChanged();
        } else {
          membersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder addMembers(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (membersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembersIsMutable();
          members_.add(index, value);
          onChanged();
        } else {
          membersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder addMembers(
          org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (membersBuilder_ == null) {
          ensureMembersIsMutable();
          members_.add(builderForValue.build());
          onChanged();
        } else {
          membersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder addMembers(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (membersBuilder_ == null) {
          ensureMembersIsMutable();
          members_.add(index, builderForValue.build());
          onChanged();
        } else {
          membersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder addAllMembers(
          java.lang.Iterable<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMember> values) {
        if (membersBuilder_ == null) {
          ensureMembersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, members_);
          onChanged();
        } else {
          membersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder clearMembers() {
        if (membersBuilder_ == null) {
          members_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          membersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public Builder removeMembers(int index) {
        if (membersBuilder_ == null) {
          ensureMembersIsMutable();
          members_.remove(index);
          onChanged();
        } else {
          membersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder getMembersBuilder(
          int index) {
        return getMembersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getMembersOrBuilder(
          int index) {
        if (membersBuilder_ == null) {
          return members_.get(index);  } else {
          return membersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
           getMembersOrBuilderList() {
        if (membersBuilder_ != null) {
          return membersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(members_);
        }
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addMembersBuilder() {
        return getMembersFieldBuilder().addBuilder(
            org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addMembersBuilder(
          int index) {
        return getMembersFieldBuilder().addBuilder(
            index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *currently maintained nodes
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember members = 15;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder> 
           getMembersBuilderList() {
        return getMembersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
          getMembersFieldBuilder() {
        if (membersBuilder_ == null) {
          membersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder>(
                  members_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          members_ = null;
        }
        return membersBuilder_;
      }

      private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> validators_ =
        java.util.Collections.emptyList();
      private void ensureValidatorsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          validators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>(validators_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> validatorsBuilder_;

      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getValidatorsList() {
        if (validatorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(validators_);
        } else {
          return validatorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public int getValidatorsCount() {
        if (validatorsBuilder_ == null) {
          return validators_.size();
        } else {
          return validatorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember getValidators(int index) {
        if (validatorsBuilder_ == null) {
          return validators_.get(index);
        } else {
          return validatorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder setValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (validatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValidatorsIsMutable();
          validators_.set(index, value);
          onChanged();
        } else {
          validatorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder setValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (validatorsBuilder_ == null) {
          ensureValidatorsIsMutable();
          validators_.set(index, builderForValue.build());
          onChanged();
        } else {
          validatorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder addValidators(org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (validatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValidatorsIsMutable();
          validators_.add(value);
          onChanged();
        } else {
          validatorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder addValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (validatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValidatorsIsMutable();
          validators_.add(index, value);
          onChanged();
        } else {
          validatorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder addValidators(
          org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (validatorsBuilder_ == null) {
          ensureValidatorsIsMutable();
          validators_.add(builderForValue.build());
          onChanged();
        } else {
          validatorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder addValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (validatorsBuilder_ == null) {
          ensureValidatorsIsMutable();
          validators_.add(index, builderForValue.build());
          onChanged();
        } else {
          validatorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder addAllValidators(
          java.lang.Iterable<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMember> values) {
        if (validatorsBuilder_ == null) {
          ensureValidatorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, validators_);
          onChanged();
        } else {
          validatorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder clearValidators() {
        if (validatorsBuilder_ == null) {
          validators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          validatorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public Builder removeValidators(int index) {
        if (validatorsBuilder_ == null) {
          ensureValidatorsIsMutable();
          validators_.remove(index);
          onChanged();
        } else {
          validatorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder getValidatorsBuilder(
          int index) {
        return getValidatorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getValidatorsOrBuilder(
          int index) {
        if (validatorsBuilder_ == null) {
          return validators_.get(index);  } else {
          return validatorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
           getValidatorsOrBuilderList() {
        if (validatorsBuilder_ != null) {
          return validatorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(validators_);
        }
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addValidatorsBuilder() {
        return getValidatorsFieldBuilder().addBuilder(
            org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addValidatorsBuilder(
          int index) {
        return getValidatorsFieldBuilder().addBuilder(
            index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *currently participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember validators = 16;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder> 
           getValidatorsBuilderList() {
        return getValidatorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
          getValidatorsFieldBuilder() {
        if (validatorsBuilder_ == null) {
          validatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder>(
                  validators_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          validators_ = null;
        }
        return validatorsBuilder_;
      }

      private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> nextValidators_ =
        java.util.Collections.emptyList();
      private void ensureNextValidatorsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          nextValidators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>(nextValidators_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> nextValidatorsBuilder_;

      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getNextValidatorsList() {
        if (nextValidatorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nextValidators_);
        } else {
          return nextValidatorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public int getNextValidatorsCount() {
        if (nextValidatorsBuilder_ == null) {
          return nextValidators_.size();
        } else {
          return nextValidatorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember getNextValidators(int index) {
        if (nextValidatorsBuilder_ == null) {
          return nextValidators_.get(index);
        } else {
          return nextValidatorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder setNextValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (nextValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNextValidatorsIsMutable();
          nextValidators_.set(index, value);
          onChanged();
        } else {
          nextValidatorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder setNextValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (nextValidatorsBuilder_ == null) {
          ensureNextValidatorsIsMutable();
          nextValidators_.set(index, builderForValue.build());
          onChanged();
        } else {
          nextValidatorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder addNextValidators(org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (nextValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNextValidatorsIsMutable();
          nextValidators_.add(value);
          onChanged();
        } else {
          nextValidatorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder addNextValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (nextValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNextValidatorsIsMutable();
          nextValidators_.add(index, value);
          onChanged();
        } else {
          nextValidatorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder addNextValidators(
          org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (nextValidatorsBuilder_ == null) {
          ensureNextValidatorsIsMutable();
          nextValidators_.add(builderForValue.build());
          onChanged();
        } else {
          nextValidatorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder addNextValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (nextValidatorsBuilder_ == null) {
          ensureNextValidatorsIsMutable();
          nextValidators_.add(index, builderForValue.build());
          onChanged();
        } else {
          nextValidatorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder addAllNextValidators(
          java.lang.Iterable<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMember> values) {
        if (nextValidatorsBuilder_ == null) {
          ensureNextValidatorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nextValidators_);
          onChanged();
        } else {
          nextValidatorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder clearNextValidators() {
        if (nextValidatorsBuilder_ == null) {
          nextValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          nextValidatorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public Builder removeNextValidators(int index) {
        if (nextValidatorsBuilder_ == null) {
          ensureNextValidatorsIsMutable();
          nextValidators_.remove(index);
          onChanged();
        } else {
          nextValidatorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder getNextValidatorsBuilder(
          int index) {
        return getNextValidatorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getNextValidatorsOrBuilder(
          int index) {
        if (nextValidatorsBuilder_ == null) {
          return nextValidators_.get(index);  } else {
          return nextValidatorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
           getNextValidatorsOrBuilderList() {
        if (nextValidatorsBuilder_ != null) {
          return nextValidatorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nextValidators_);
        }
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addNextValidatorsBuilder() {
        return getNextValidatorsFieldBuilder().addBuilder(
            org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addNextValidatorsBuilder(
          int index) {
        return getNextValidatorsFieldBuilder().addBuilder(
            index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *next participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember next_validators = 17;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder> 
           getNextValidatorsBuilderList() {
        return getNextValidatorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
          getNextValidatorsFieldBuilder() {
        if (nextValidatorsBuilder_ == null) {
          nextValidatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder>(
                  nextValidators_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          nextValidators_ = null;
        }
        return nextValidatorsBuilder_;
      }

      private long lastMinQuorumForQc_ ;
      /**
       * <pre>
       *the last epoch minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 last_min_quorum_for_qc = 18;</code>
       * @return The lastMinQuorumForQc.
       */
      @java.lang.Override
      public long getLastMinQuorumForQc() {
        return lastMinQuorumForQc_;
      }
      /**
       * <pre>
       *the last epoch minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 last_min_quorum_for_qc = 18;</code>
       * @param value The lastMinQuorumForQc to set.
       * @return This builder for chaining.
       */
      public Builder setLastMinQuorumForQc(long value) {
        
        lastMinQuorumForQc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *the last epoch minimum number of consensus nodes that need to survive
       * </pre>
       *
       * <code>uint64 last_min_quorum_for_qc = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearLastMinQuorumForQc() {
        
        lastMinQuorumForQc_ = 0L;
        onChanged();
        return this;
      }

      private long maxbftRoundTimeoutMill_ ;
      /**
       * <pre>
       *The base timeout for viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_mill = 19;</code>
       * @return The maxbftRoundTimeoutMill.
       */
      @java.lang.Override
      public long getMaxbftRoundTimeoutMill() {
        return maxbftRoundTimeoutMill_;
      }
      /**
       * <pre>
       *The base timeout for viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_mill = 19;</code>
       * @param value The maxbftRoundTimeoutMill to set.
       * @return This builder for chaining.
       */
      public Builder setMaxbftRoundTimeoutMill(long value) {
        
        maxbftRoundTimeoutMill_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *The base timeout for viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_mill = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxbftRoundTimeoutMill() {
        
        maxbftRoundTimeoutMill_ = 0L;
        onChanged();
        return this;
      }

      private long maxbftRoundTimeoutIntervalMill_ ;
      /**
       * <pre>
       *The delta timeout for the viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_interval_mill = 20;</code>
       * @return The maxbftRoundTimeoutIntervalMill.
       */
      @java.lang.Override
      public long getMaxbftRoundTimeoutIntervalMill() {
        return maxbftRoundTimeoutIntervalMill_;
      }
      /**
       * <pre>
       *The delta timeout for the viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_interval_mill = 20;</code>
       * @param value The maxbftRoundTimeoutIntervalMill to set.
       * @return This builder for chaining.
       */
      public Builder setMaxbftRoundTimeoutIntervalMill(long value) {
        
        maxbftRoundTimeoutIntervalMill_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *The delta timeout for the viewChange
       * </pre>
       *
       * <code>uint64 maxbft_round_timeout_interval_mill = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxbftRoundTimeoutIntervalMill() {
        
        maxbftRoundTimeoutIntervalMill_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> lastValidators_ =
        java.util.Collections.emptyList();
      private void ensureLastValidatorsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          lastValidators_ = new java.util.ArrayList<org.chainmaker.pb.consensus.Consensus.GovernanceMember>(lastValidators_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> lastValidatorsBuilder_;

      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember> getLastValidatorsList() {
        if (lastValidatorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lastValidators_);
        } else {
          return lastValidatorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public int getLastValidatorsCount() {
        if (lastValidatorsBuilder_ == null) {
          return lastValidators_.size();
        } else {
          return lastValidatorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember getLastValidators(int index) {
        if (lastValidatorsBuilder_ == null) {
          return lastValidators_.get(index);
        } else {
          return lastValidatorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder setLastValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (lastValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLastValidatorsIsMutable();
          lastValidators_.set(index, value);
          onChanged();
        } else {
          lastValidatorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder setLastValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (lastValidatorsBuilder_ == null) {
          ensureLastValidatorsIsMutable();
          lastValidators_.set(index, builderForValue.build());
          onChanged();
        } else {
          lastValidatorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder addLastValidators(org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (lastValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLastValidatorsIsMutable();
          lastValidators_.add(value);
          onChanged();
        } else {
          lastValidatorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder addLastValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember value) {
        if (lastValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLastValidatorsIsMutable();
          lastValidators_.add(index, value);
          onChanged();
        } else {
          lastValidatorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder addLastValidators(
          org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (lastValidatorsBuilder_ == null) {
          ensureLastValidatorsIsMutable();
          lastValidators_.add(builderForValue.build());
          onChanged();
        } else {
          lastValidatorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder addLastValidators(
          int index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder builderForValue) {
        if (lastValidatorsBuilder_ == null) {
          ensureLastValidatorsIsMutable();
          lastValidators_.add(index, builderForValue.build());
          onChanged();
        } else {
          lastValidatorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder addAllLastValidators(
          java.lang.Iterable<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMember> values) {
        if (lastValidatorsBuilder_ == null) {
          ensureLastValidatorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lastValidators_);
          onChanged();
        } else {
          lastValidatorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder clearLastValidators() {
        if (lastValidatorsBuilder_ == null) {
          lastValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          lastValidatorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public Builder removeLastValidators(int index) {
        if (lastValidatorsBuilder_ == null) {
          ensureLastValidatorsIsMutable();
          lastValidators_.remove(index);
          onChanged();
        } else {
          lastValidatorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder getLastValidatorsBuilder(
          int index) {
        return getLastValidatorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder getLastValidatorsOrBuilder(
          int index) {
        if (lastValidatorsBuilder_ == null) {
          return lastValidators_.get(index);  } else {
          return lastValidatorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public java.util.List<? extends org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
           getLastValidatorsOrBuilderList() {
        if (lastValidatorsBuilder_ != null) {
          return lastValidatorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lastValidators_);
        }
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addLastValidatorsBuilder() {
        return getLastValidatorsFieldBuilder().addBuilder(
            org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder addLastValidatorsBuilder(
          int index) {
        return getLastValidatorsFieldBuilder().addBuilder(
            index, org.chainmaker.pb.consensus.Consensus.GovernanceMember.getDefaultInstance());
      }
      /**
       * <pre>
       *last epoch participate validators
       * </pre>
       *
       * <code>repeated .consensus.GovernanceMember last_validators = 21;</code>
       */
      public java.util.List<org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder> 
           getLastValidatorsBuilderList() {
        return getLastValidatorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder> 
          getLastValidatorsFieldBuilder() {
        if (lastValidatorsBuilder_ == null) {
          lastValidatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.chainmaker.pb.consensus.Consensus.GovernanceMember, org.chainmaker.pb.consensus.Consensus.GovernanceMember.Builder, org.chainmaker.pb.consensus.Consensus.GovernanceMemberOrBuilder>(
                  lastValidators_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          lastValidators_ = null;
        }
        return lastValidatorsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:consensus.GovernanceContract)
    }

    // @@protoc_insertion_point(class_scope:consensus.GovernanceContract)
    private static final org.chainmaker.pb.consensus.Consensus.GovernanceContract DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.consensus.Consensus.GovernanceContract();
    }

    public static org.chainmaker.pb.consensus.Consensus.GovernanceContract getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GovernanceContract>
        PARSER = new com.google.protobuf.AbstractParser<GovernanceContract>() {
      @java.lang.Override
      public GovernanceContract parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GovernanceContract(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GovernanceContract> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GovernanceContract> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.consensus.Consensus.GovernanceContract getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_VerifyResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_VerifyResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_VerifyResult_TxsRwSetEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_VerifyResult_TxsRwSetEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_ProposalBlock_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_ProposalBlock_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_ProposalBlock_TxsRwSetEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_ProposalBlock_TxsRwSetEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_BlockHeaderConsensusArgs_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_BlockHeaderConsensusArgs_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_GovernanceMember_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_GovernanceMember_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_consensus_GovernanceContract_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_consensus_GovernanceContract_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031consensus/consensus.proto\022\tconsensus\032\022" +
      "common/block.proto\032\022common/rwset.proto\"\212" +
      "\002\n\014VerifyResult\022%\n\016verified_block\030\001 \001(\0132" +
      "\r.common.Block\022*\n\004code\030\002 \001(\0162\034.consensus" +
      ".VerifyResult.Code\022\013\n\003msg\030\003 \001(\t\0229\n\ntxs_r" +
      "w_set\030\004 \003(\0132%.consensus.VerifyResult.Txs" +
      "RwSetEntry\032@\n\rTxsRwSetEntry\022\013\n\003key\030\001 \001(\t" +
      "\022\036\n\005value\030\002 \001(\0132\017.common.TxRWSet:\0028\001\"\035\n\004" +
      "Code\022\013\n\007SUCCESS\020\000\022\010\n\004FAIL\020\001\"\253\001\n\rProposal" +
      "Block\022\034\n\005block\030\001 \001(\0132\r.common.Block\022:\n\nt" +
      "xs_rw_set\030\002 \003(\0132&.consensus.ProposalBloc" +
      "k.TxsRwSetEntry\032@\n\rTxsRwSetEntry\022\013\n\003key\030" +
      "\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.common.TxRWSet:\0028" +
      "\001\"y\n\030BlockHeaderConsensusArgs\022\026\n\016consens" +
      "us_type\030\001 \001(\003\022\r\n\005round\030\003 \001(\004\022\r\n\005level\030\004 " +
      "\001(\004\022\'\n\016consensus_data\030\005 \001(\0132\017.common.TxR" +
      "WSet\"2\n\020GovernanceMember\022\017\n\007node_id\030\001 \001(" +
      "\t\022\r\n\005index\030\002 \001(\003\"\222\005\n\022GovernanceContract\022" +
      "\020\n\010epoch_id\030\001 \001(\004\022&\n\004type\030\002 \001(\0162\030.consen" +
      "sus.ConsensusType\022\025\n\rcur_max_index\030\003 \001(\003" +
      "\022\033\n\023skip_timeout_commit\030\004 \001(\010\022\027\n\017config_" +
      "sequence\030\006 \001(\004\022\t\n\001n\030\007 \001(\004\022\031\n\021min_quorum_" +
      "for_qc\030\010 \001(\004\022\022\n\ncached_len\030\t \001(\004\022\032\n\022next" +
      "_switch_height\030\n \001(\004\022\025\n\rtransit_block\030\013 " +
      "\001(\004\022\033\n\023block_num_per_epoch\030\014 \001(\004\022\025\n\rvali" +
      "dator_num\030\r \001(\004\022\032\n\022node_propose_round\030\016 " +
      "\001(\004\022,\n\007members\030\017 \003(\0132\033.consensus.Governa" +
      "nceMember\022/\n\nvalidators\030\020 \003(\0132\033.consensu" +
      "s.GovernanceMember\0224\n\017next_validators\030\021 " +
      "\003(\0132\033.consensus.GovernanceMember\022\036\n\026last" +
      "_min_quorum_for_qc\030\022 \001(\004\022!\n\031maxbft_round" +
      "_timeout_mill\030\023 \001(\004\022*\n\"maxbft_round_time" +
      "out_interval_mill\030\024 \001(\004\0224\n\017last_validato" +
      "rs\030\025 \003(\0132\033.consensus.GovernanceMember*V\n" +
      "\rConsensusType\022\010\n\004SOLO\020\000\022\010\n\004TBFT\020\001\022\010\n\004MB" +
      "FT\020\002\022\n\n\006MAXBFT\020\003\022\010\n\004RAFT\020\004\022\010\n\004DPOS\020\005\022\007\n\003" +
      "POW\020\nBK\n\033org.chainmaker.pb.consensusZ,ch" +
      "ainmaker.org/chainmaker/pb-go/v2/consens" +
      "usb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.chainmaker.pb.common.ChainmakerBlock.getDescriptor(),
          org.chainmaker.pb.common.Rwset.getDescriptor(),
        });
    internal_static_consensus_VerifyResult_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_consensus_VerifyResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_VerifyResult_descriptor,
        new java.lang.String[] { "VerifiedBlock", "Code", "Msg", "TxsRwSet", });
    internal_static_consensus_VerifyResult_TxsRwSetEntry_descriptor =
      internal_static_consensus_VerifyResult_descriptor.getNestedTypes().get(0);
    internal_static_consensus_VerifyResult_TxsRwSetEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_VerifyResult_TxsRwSetEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_consensus_ProposalBlock_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_consensus_ProposalBlock_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_ProposalBlock_descriptor,
        new java.lang.String[] { "Block", "TxsRwSet", });
    internal_static_consensus_ProposalBlock_TxsRwSetEntry_descriptor =
      internal_static_consensus_ProposalBlock_descriptor.getNestedTypes().get(0);
    internal_static_consensus_ProposalBlock_TxsRwSetEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_ProposalBlock_TxsRwSetEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_consensus_BlockHeaderConsensusArgs_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_consensus_BlockHeaderConsensusArgs_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_BlockHeaderConsensusArgs_descriptor,
        new java.lang.String[] { "ConsensusType", "Round", "Level", "ConsensusData", });
    internal_static_consensus_GovernanceMember_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_consensus_GovernanceMember_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_GovernanceMember_descriptor,
        new java.lang.String[] { "NodeId", "Index", });
    internal_static_consensus_GovernanceContract_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_consensus_GovernanceContract_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_consensus_GovernanceContract_descriptor,
        new java.lang.String[] { "EpochId", "Type", "CurMaxIndex", "SkipTimeoutCommit", "ConfigSequence", "N", "MinQuorumForQc", "CachedLen", "NextSwitchHeight", "TransitBlock", "BlockNumPerEpoch", "ValidatorNum", "NodeProposeRound", "Members", "Validators", "NextValidators", "LastMinQuorumForQc", "MaxbftRoundTimeoutMill", "MaxbftRoundTimeoutIntervalMill", "LastValidators", });
    org.chainmaker.pb.common.ChainmakerBlock.getDescriptor();
    org.chainmaker.pb.common.Rwset.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
