// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscontract/chain_config.proto

package org.chainmaker.pb.syscontract;

public final class ChainConfig {
  private ChainConfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * methods of chain config contract
   * </pre>
   *
   * Protobuf enum {@code syscontract.ChainConfigFunction}
   */
  public enum ChainConfigFunction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * get chain configuration
     * </pre>
     *
     * <code>GET_CHAIN_CONFIG = 0;</code>
     */
    GET_CHAIN_CONFIG(0),
    /**
     * <pre>
     * get the latest configuration block
     * the incoming block height must exist in the database
     * </pre>
     *
     * <code>GET_CHAIN_CONFIG_AT = 1;</code>
     */
    GET_CHAIN_CONFIG_AT(1),
    /**
     * <pre>
     * update core
     * </pre>
     *
     * <code>CORE_UPDATE = 2;</code>
     */
    CORE_UPDATE(2),
    /**
     * <pre>
     * update block
     * </pre>
     *
     * <code>BLOCK_UPDATE = 3;</code>
     */
    BLOCK_UPDATE(3),
    /**
     * <pre>
     * add trusted certificate (org_id and root)
     * </pre>
     *
     * <code>TRUST_ROOT_ADD = 4;</code>
     */
    TRUST_ROOT_ADD(4),
    /**
     * <pre>
     * [self] modify an individual's own trusted root certificate [org_id must exist in the original trust_roots,
     * and the new root certificate must be different from other certificates]
     * </pre>
     *
     * <code>TRUST_ROOT_UPDATE = 5;</code>
     */
    TRUST_ROOT_UPDATE(5),
    /**
     * <pre>
     * delete trusted root certificate [org_ ID should be in trust_ The nodes in nodes need to be deleted]
     * </pre>
     *
     * <code>TRUST_ROOT_DELETE = 6;</code>
     */
    TRUST_ROOT_DELETE(6),
    /**
     * <pre>
     * organization add node address
     * org_id must already exist in nodes，you can add addresses in batches
     * the parameter is addresses. Single addresses are separated by ","
     * ip+port and peerid cannot be repeated
     * Deprecated , replace by NODE_ID_ADD
     * </pre>
     *
     * <code>NODE_ADDR_ADD = 7;</code>
     */
    NODE_ADDR_ADD(7),
    /**
     * <pre>
     * [self]the organization updates an address
     *[org_id and address must already exist in nodes, new_address is the new address. ip+port and peerId cannot be duplicated]
     * Deprecated , replace by NODE_ID_UPDATE
     * </pre>
     *
     * <code>NODE_ADDR_UPDATE = 8;</code>
     */
    NODE_ADDR_UPDATE(8),
    /**
     * <pre>
     * organization delete node address [org_id and address must already exist in nodes]
     * Deprecated , replace by NODE_ID_DELETE
     * </pre>
     *
     * <code>NODE_ADDR_DELETE = 9;</code>
     */
    NODE_ADDR_DELETE(9),
    /**
     * <pre>
     * organization add node address in batches [org_id在nodes不存在，批量添加地址，参数为node_ids，单地址用逗号","隔开。nodeId不能重复]
     * </pre>
     *
     * <code>NODE_ORG_ADD = 10;</code>
     */
    NODE_ORG_ADD(10),
    /**
     * <pre>
     * organization update
     * org_id must already exist in nodes，the parameter is addresses，Single addresses are separated by ","
     * ip+port and peerid cannot be repeated
     * </pre>
     *
     * <code>NODE_ORG_UPDATE = 11;</code>
     */
    NODE_ORG_UPDATE(11),
    /**
     * <pre>
     * organization delete, org_id must already exist in nodes
     * </pre>
     *
     * <code>NODE_ORG_DELETE = 12;</code>
     */
    NODE_ORG_DELETE(12),
    /**
     * <pre>
     * add consensus parameters, key is not exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_ADD = 13;</code>
     */
    CONSENSUS_EXT_ADD(13),
    /**
     * <pre>
     * update onsensus parameters, key exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_UPDATE = 14;</code>
     */
    CONSENSUS_EXT_UPDATE(14),
    /**
     * <pre>
     * delete onsensus parameters, key exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_DELETE = 15;</code>
     */
    CONSENSUS_EXT_DELETE(15),
    /**
     * <pre>
     * add permission
     * </pre>
     *
     * <code>PERMISSION_ADD = 16;</code>
     */
    PERMISSION_ADD(16),
    /**
     * <pre>
     * update permission
     * </pre>
     *
     * <code>PERMISSION_UPDATE = 17;</code>
     */
    PERMISSION_UPDATE(17),
    /**
     * <pre>
     * delete permission
     * </pre>
     *
     * <code>PERMISSION_DELETE = 18;</code>
     */
    PERMISSION_DELETE(18),
    /**
     * <pre>
     * organization add node_id
     * org_id must already exist in nodes，you can add node_id in batches
     * the parameter is node_ids. Single node_ids are separated by ","
     * node_id cannot be repeated
     * </pre>
     *
     * <code>NODE_ID_ADD = 19;</code>
     */
    NODE_ID_ADD(19),
    /**
     * <pre>
     * [self]the organization updates a node_ids
     *[org_id and node_ids must already exist in nodes, new_node_id is the new node_id. node_id cannot be duplicated]
     * </pre>
     *
     * <code>NODE_ID_UPDATE = 20;</code>
     */
    NODE_ID_UPDATE(20),
    /**
     * <pre>
     * organization delete node_id [org_id and node_id must already exist in nodes]
     * </pre>
     *
     * <code>NODE_ID_DELETE = 21;</code>
     */
    NODE_ID_DELETE(21),
    /**
     * <pre>
     * add trusted member (org_id signcert role  node_id)
     * </pre>
     *
     * <code>TRUST_MEMBER_ADD = 22;</code>
     */
    TRUST_MEMBER_ADD(22),
    /**
     * <pre>
     * [self] modify an individual's own trusted member [node_id must exist in the original trust_members,
     * and the new trust member must be different from other trust members]
     * </pre>
     *
     * <code>TRUST_MEMBER_UPDATE = 23;</code>
     */
    TRUST_MEMBER_UPDATE(23),
    /**
     * <pre>
     * delete trusted member certificate [node_ ID should be in trust_ The nodes in nodes need to be deleted]
     * </pre>
     *
     * <code>TRUST_MEMBER_DELETE = 24;</code>
     */
    TRUST_MEMBER_DELETE(24),
    /**
     * <pre>
     * alter address type
     * </pre>
     *
     * <code>ALTER_ADDR_TYPE = 25;</code>
     */
    ALTER_ADDR_TYPE(25),
    /**
     * <pre>
     * able or enable gas calc
     * </pre>
     *
     * <code>ENABLE_OR_DISABLE_GAS = 26;</code>
     */
    ENABLE_OR_DISABLE_GAS(26),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * get chain configuration
     * </pre>
     *
     * <code>GET_CHAIN_CONFIG = 0;</code>
     */
    public static final int GET_CHAIN_CONFIG_VALUE = 0;
    /**
     * <pre>
     * get the latest configuration block
     * the incoming block height must exist in the database
     * </pre>
     *
     * <code>GET_CHAIN_CONFIG_AT = 1;</code>
     */
    public static final int GET_CHAIN_CONFIG_AT_VALUE = 1;
    /**
     * <pre>
     * update core
     * </pre>
     *
     * <code>CORE_UPDATE = 2;</code>
     */
    public static final int CORE_UPDATE_VALUE = 2;
    /**
     * <pre>
     * update block
     * </pre>
     *
     * <code>BLOCK_UPDATE = 3;</code>
     */
    public static final int BLOCK_UPDATE_VALUE = 3;
    /**
     * <pre>
     * add trusted certificate (org_id and root)
     * </pre>
     *
     * <code>TRUST_ROOT_ADD = 4;</code>
     */
    public static final int TRUST_ROOT_ADD_VALUE = 4;
    /**
     * <pre>
     * [self] modify an individual's own trusted root certificate [org_id must exist in the original trust_roots,
     * and the new root certificate must be different from other certificates]
     * </pre>
     *
     * <code>TRUST_ROOT_UPDATE = 5;</code>
     */
    public static final int TRUST_ROOT_UPDATE_VALUE = 5;
    /**
     * <pre>
     * delete trusted root certificate [org_ ID should be in trust_ The nodes in nodes need to be deleted]
     * </pre>
     *
     * <code>TRUST_ROOT_DELETE = 6;</code>
     */
    public static final int TRUST_ROOT_DELETE_VALUE = 6;
    /**
     * <pre>
     * organization add node address
     * org_id must already exist in nodes，you can add addresses in batches
     * the parameter is addresses. Single addresses are separated by ","
     * ip+port and peerid cannot be repeated
     * Deprecated , replace by NODE_ID_ADD
     * </pre>
     *
     * <code>NODE_ADDR_ADD = 7;</code>
     */
    public static final int NODE_ADDR_ADD_VALUE = 7;
    /**
     * <pre>
     * [self]the organization updates an address
     *[org_id and address must already exist in nodes, new_address is the new address. ip+port and peerId cannot be duplicated]
     * Deprecated , replace by NODE_ID_UPDATE
     * </pre>
     *
     * <code>NODE_ADDR_UPDATE = 8;</code>
     */
    public static final int NODE_ADDR_UPDATE_VALUE = 8;
    /**
     * <pre>
     * organization delete node address [org_id and address must already exist in nodes]
     * Deprecated , replace by NODE_ID_DELETE
     * </pre>
     *
     * <code>NODE_ADDR_DELETE = 9;</code>
     */
    public static final int NODE_ADDR_DELETE_VALUE = 9;
    /**
     * <pre>
     * organization add node address in batches [org_id在nodes不存在，批量添加地址，参数为node_ids，单地址用逗号","隔开。nodeId不能重复]
     * </pre>
     *
     * <code>NODE_ORG_ADD = 10;</code>
     */
    public static final int NODE_ORG_ADD_VALUE = 10;
    /**
     * <pre>
     * organization update
     * org_id must already exist in nodes，the parameter is addresses，Single addresses are separated by ","
     * ip+port and peerid cannot be repeated
     * </pre>
     *
     * <code>NODE_ORG_UPDATE = 11;</code>
     */
    public static final int NODE_ORG_UPDATE_VALUE = 11;
    /**
     * <pre>
     * organization delete, org_id must already exist in nodes
     * </pre>
     *
     * <code>NODE_ORG_DELETE = 12;</code>
     */
    public static final int NODE_ORG_DELETE_VALUE = 12;
    /**
     * <pre>
     * add consensus parameters, key is not exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_ADD = 13;</code>
     */
    public static final int CONSENSUS_EXT_ADD_VALUE = 13;
    /**
     * <pre>
     * update onsensus parameters, key exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_UPDATE = 14;</code>
     */
    public static final int CONSENSUS_EXT_UPDATE_VALUE = 14;
    /**
     * <pre>
     * delete onsensus parameters, key exit in ext_config
     * </pre>
     *
     * <code>CONSENSUS_EXT_DELETE = 15;</code>
     */
    public static final int CONSENSUS_EXT_DELETE_VALUE = 15;
    /**
     * <pre>
     * add permission
     * </pre>
     *
     * <code>PERMISSION_ADD = 16;</code>
     */
    public static final int PERMISSION_ADD_VALUE = 16;
    /**
     * <pre>
     * update permission
     * </pre>
     *
     * <code>PERMISSION_UPDATE = 17;</code>
     */
    public static final int PERMISSION_UPDATE_VALUE = 17;
    /**
     * <pre>
     * delete permission
     * </pre>
     *
     * <code>PERMISSION_DELETE = 18;</code>
     */
    public static final int PERMISSION_DELETE_VALUE = 18;
    /**
     * <pre>
     * organization add node_id
     * org_id must already exist in nodes，you can add node_id in batches
     * the parameter is node_ids. Single node_ids are separated by ","
     * node_id cannot be repeated
     * </pre>
     *
     * <code>NODE_ID_ADD = 19;</code>
     */
    public static final int NODE_ID_ADD_VALUE = 19;
    /**
     * <pre>
     * [self]the organization updates a node_ids
     *[org_id and node_ids must already exist in nodes, new_node_id is the new node_id. node_id cannot be duplicated]
     * </pre>
     *
     * <code>NODE_ID_UPDATE = 20;</code>
     */
    public static final int NODE_ID_UPDATE_VALUE = 20;
    /**
     * <pre>
     * organization delete node_id [org_id and node_id must already exist in nodes]
     * </pre>
     *
     * <code>NODE_ID_DELETE = 21;</code>
     */
    public static final int NODE_ID_DELETE_VALUE = 21;
    /**
     * <pre>
     * add trusted member (org_id signcert role  node_id)
     * </pre>
     *
     * <code>TRUST_MEMBER_ADD = 22;</code>
     */
    public static final int TRUST_MEMBER_ADD_VALUE = 22;
    /**
     * <pre>
     * [self] modify an individual's own trusted member [node_id must exist in the original trust_members,
     * and the new trust member must be different from other trust members]
     * </pre>
     *
     * <code>TRUST_MEMBER_UPDATE = 23;</code>
     */
    public static final int TRUST_MEMBER_UPDATE_VALUE = 23;
    /**
     * <pre>
     * delete trusted member certificate [node_ ID should be in trust_ The nodes in nodes need to be deleted]
     * </pre>
     *
     * <code>TRUST_MEMBER_DELETE = 24;</code>
     */
    public static final int TRUST_MEMBER_DELETE_VALUE = 24;
    /**
     * <pre>
     * alter address type
     * </pre>
     *
     * <code>ALTER_ADDR_TYPE = 25;</code>
     */
    public static final int ALTER_ADDR_TYPE_VALUE = 25;
    /**
     * <pre>
     * able or enable gas calc
     * </pre>
     *
     * <code>ENABLE_OR_DISABLE_GAS = 26;</code>
     */
    public static final int ENABLE_OR_DISABLE_GAS_VALUE = 26;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ChainConfigFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ChainConfigFunction forNumber(int value) {
      switch (value) {
        case 0: return GET_CHAIN_CONFIG;
        case 1: return GET_CHAIN_CONFIG_AT;
        case 2: return CORE_UPDATE;
        case 3: return BLOCK_UPDATE;
        case 4: return TRUST_ROOT_ADD;
        case 5: return TRUST_ROOT_UPDATE;
        case 6: return TRUST_ROOT_DELETE;
        case 7: return NODE_ADDR_ADD;
        case 8: return NODE_ADDR_UPDATE;
        case 9: return NODE_ADDR_DELETE;
        case 10: return NODE_ORG_ADD;
        case 11: return NODE_ORG_UPDATE;
        case 12: return NODE_ORG_DELETE;
        case 13: return CONSENSUS_EXT_ADD;
        case 14: return CONSENSUS_EXT_UPDATE;
        case 15: return CONSENSUS_EXT_DELETE;
        case 16: return PERMISSION_ADD;
        case 17: return PERMISSION_UPDATE;
        case 18: return PERMISSION_DELETE;
        case 19: return NODE_ID_ADD;
        case 20: return NODE_ID_UPDATE;
        case 21: return NODE_ID_DELETE;
        case 22: return TRUST_MEMBER_ADD;
        case 23: return TRUST_MEMBER_UPDATE;
        case 24: return TRUST_MEMBER_DELETE;
        case 25: return ALTER_ADDR_TYPE;
        case 26: return ENABLE_OR_DISABLE_GAS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ChainConfigFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ChainConfigFunction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ChainConfigFunction>() {
            public ChainConfigFunction findValueByNumber(int number) {
              return ChainConfigFunction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.ChainConfig.getDescriptor().getEnumTypes().get(0);
    }

    private static final ChainConfigFunction[] VALUES = values();

    public static ChainConfigFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ChainConfigFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.ChainConfigFunction)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036syscontract/chain_config.proto\022\013syscon" +
      "tract*\342\004\n\023ChainConfigFunction\022\024\n\020GET_CHA" +
      "IN_CONFIG\020\000\022\027\n\023GET_CHAIN_CONFIG_AT\020\001\022\017\n\013" +
      "CORE_UPDATE\020\002\022\020\n\014BLOCK_UPDATE\020\003\022\022\n\016TRUST" +
      "_ROOT_ADD\020\004\022\025\n\021TRUST_ROOT_UPDATE\020\005\022\025\n\021TR" +
      "UST_ROOT_DELETE\020\006\022\021\n\rNODE_ADDR_ADD\020\007\022\024\n\020" +
      "NODE_ADDR_UPDATE\020\010\022\024\n\020NODE_ADDR_DELETE\020\t" +
      "\022\020\n\014NODE_ORG_ADD\020\n\022\023\n\017NODE_ORG_UPDATE\020\013\022" +
      "\023\n\017NODE_ORG_DELETE\020\014\022\025\n\021CONSENSUS_EXT_AD" +
      "D\020\r\022\030\n\024CONSENSUS_EXT_UPDATE\020\016\022\030\n\024CONSENS" +
      "US_EXT_DELETE\020\017\022\022\n\016PERMISSION_ADD\020\020\022\025\n\021P" +
      "ERMISSION_UPDATE\020\021\022\025\n\021PERMISSION_DELETE\020" +
      "\022\022\017\n\013NODE_ID_ADD\020\023\022\022\n\016NODE_ID_UPDATE\020\024\022\022" +
      "\n\016NODE_ID_DELETE\020\025\022\024\n\020TRUST_MEMBER_ADD\020\026" +
      "\022\027\n\023TRUST_MEMBER_UPDATE\020\027\022\027\n\023TRUST_MEMBE" +
      "R_DELETE\020\030\022\023\n\017ALTER_ADDR_TYPE\020\031\022\031\n\025ENABL" +
      "E_OR_DISABLE_GAS\020\032BO\n\035org.chainmaker.pb." +
      "syscontractZ.chainmaker.org/chainmaker/p" +
      "b-go/v2/syscontractb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
