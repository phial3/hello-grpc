// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscontract/dpos_erc20.proto

package org.chainmaker.pb.syscontract;

public final class DposErc20 {
  private DposErc20() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * methods of DPoS ERC20 contract
   * </pre>
   *
   * Protobuf enum {@code syscontract.DPoSERC20Function}
   */
  public enum DPoSERC20Function
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * get owner of DPoS
     * </pre>
     *
     * <code>GET_OWNER = 0;</code>
     */
    GET_OWNER(0),
    /**
     * <pre>
     * get decimals of DPoS
     * </pre>
     *
     * <code>GET_DECIMALS = 1;</code>
     */
    GET_DECIMALS(1),
    /**
     * <pre>
     * transfer token at DPoS
     * </pre>
     *
     * <code>TRANSFER = 2;</code>
     */
    TRANSFER(2),
    /**
     * <pre>
     * transfer token from user at DPoS
     * </pre>
     *
     * <code>TRANSFER_FROM = 3;</code>
     */
    TRANSFER_FROM(3),
    /**
     * <pre>
     * get balance of user at DPoS
     * </pre>
     *
     * <code>GET_BALANCEOF = 4;</code>
     */
    GET_BALANCEOF(4),
    /**
     * <pre>
     * approve token for user to other user at DPoS
     * </pre>
     *
     * <code>APPROVE = 5;</code>
     */
    APPROVE(5),
    /**
     * <pre>
     * get allowance at DPoS
     * </pre>
     *
     * <code>GET_ALLOWANCE = 6;</code>
     */
    GET_ALLOWANCE(6),
    /**
     * <pre>
     * burn token at DPoS
     * </pre>
     *
     * <code>BURN = 7;</code>
     */
    BURN(7),
    /**
     * <pre>
     * mint token at DPoS
     * </pre>
     *
     * <code>MINT = 8;</code>
     */
    MINT(8),
    /**
     * <pre>
     * transfer owner ship at DPoS
     * </pre>
     *
     * <code>TRANSFER_OWNERSHIP = 9;</code>
     */
    TRANSFER_OWNERSHIP(9),
    /**
     * <pre>
     * get total supply of tokens
     * </pre>
     *
     * <code>GET_TOTAL_SUPPLY = 10;</code>
     */
    GET_TOTAL_SUPPLY(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * get owner of DPoS
     * </pre>
     *
     * <code>GET_OWNER = 0;</code>
     */
    public static final int GET_OWNER_VALUE = 0;
    /**
     * <pre>
     * get decimals of DPoS
     * </pre>
     *
     * <code>GET_DECIMALS = 1;</code>
     */
    public static final int GET_DECIMALS_VALUE = 1;
    /**
     * <pre>
     * transfer token at DPoS
     * </pre>
     *
     * <code>TRANSFER = 2;</code>
     */
    public static final int TRANSFER_VALUE = 2;
    /**
     * <pre>
     * transfer token from user at DPoS
     * </pre>
     *
     * <code>TRANSFER_FROM = 3;</code>
     */
    public static final int TRANSFER_FROM_VALUE = 3;
    /**
     * <pre>
     * get balance of user at DPoS
     * </pre>
     *
     * <code>GET_BALANCEOF = 4;</code>
     */
    public static final int GET_BALANCEOF_VALUE = 4;
    /**
     * <pre>
     * approve token for user to other user at DPoS
     * </pre>
     *
     * <code>APPROVE = 5;</code>
     */
    public static final int APPROVE_VALUE = 5;
    /**
     * <pre>
     * get allowance at DPoS
     * </pre>
     *
     * <code>GET_ALLOWANCE = 6;</code>
     */
    public static final int GET_ALLOWANCE_VALUE = 6;
    /**
     * <pre>
     * burn token at DPoS
     * </pre>
     *
     * <code>BURN = 7;</code>
     */
    public static final int BURN_VALUE = 7;
    /**
     * <pre>
     * mint token at DPoS
     * </pre>
     *
     * <code>MINT = 8;</code>
     */
    public static final int MINT_VALUE = 8;
    /**
     * <pre>
     * transfer owner ship at DPoS
     * </pre>
     *
     * <code>TRANSFER_OWNERSHIP = 9;</code>
     */
    public static final int TRANSFER_OWNERSHIP_VALUE = 9;
    /**
     * <pre>
     * get total supply of tokens
     * </pre>
     *
     * <code>GET_TOTAL_SUPPLY = 10;</code>
     */
    public static final int GET_TOTAL_SUPPLY_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DPoSERC20Function valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DPoSERC20Function forNumber(int value) {
      switch (value) {
        case 0: return GET_OWNER;
        case 1: return GET_DECIMALS;
        case 2: return TRANSFER;
        case 3: return TRANSFER_FROM;
        case 4: return GET_BALANCEOF;
        case 5: return APPROVE;
        case 6: return GET_ALLOWANCE;
        case 7: return BURN;
        case 8: return MINT;
        case 9: return TRANSFER_OWNERSHIP;
        case 10: return GET_TOTAL_SUPPLY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DPoSERC20Function>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DPoSERC20Function> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DPoSERC20Function>() {
            public DPoSERC20Function findValueByNumber(int number) {
              return DPoSERC20Function.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.DposErc20.getDescriptor().getEnumTypes().get(0);
    }

    private static final DPoSERC20Function[] VALUES = values();

    public static DPoSERC20Function valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DPoSERC20Function(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.DPoSERC20Function)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034syscontract/dpos_erc20.proto\022\013syscontr" +
      "act*\312\001\n\021DPoSERC20Function\022\r\n\tGET_OWNER\020\000" +
      "\022\020\n\014GET_DECIMALS\020\001\022\014\n\010TRANSFER\020\002\022\021\n\rTRAN" +
      "SFER_FROM\020\003\022\021\n\rGET_BALANCEOF\020\004\022\013\n\007APPROV" +
      "E\020\005\022\021\n\rGET_ALLOWANCE\020\006\022\010\n\004BURN\020\007\022\010\n\004MINT" +
      "\020\010\022\026\n\022TRANSFER_OWNERSHIP\020\t\022\024\n\020GET_TOTAL_" +
      "SUPPLY\020\nBO\n\035org.chainmaker.pb.syscontrac" +
      "tZ.chainmaker.org/chainmaker/pb-go/v2/sy" +
      "scontractb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
