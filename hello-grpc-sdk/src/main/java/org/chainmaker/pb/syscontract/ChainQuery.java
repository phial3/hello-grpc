// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscontract/chain_query.proto

package org.chainmaker.pb.syscontract;

public final class ChainQuery {
  private ChainQuery() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * methods of chain query contract
   * </pre>
   *
   * Protobuf enum {@code syscontract.ChainQueryFunction}
   */
  public enum ChainQueryFunction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * get block by transactionId
     * </pre>
     *
     * <code>GET_BLOCK_BY_TX_ID = 0;</code>
     */
    GET_BLOCK_BY_TX_ID(0),
    /**
     * <pre>
     * get transaction by transactionId
     * </pre>
     *
     * <code>GET_TX_BY_TX_ID = 1;</code>
     */
    GET_TX_BY_TX_ID(1),
    /**
     * <pre>
     * get block by block height
     * </pre>
     *
     * <code>GET_BLOCK_BY_HEIGHT = 2;</code>
     */
    GET_BLOCK_BY_HEIGHT(2),
    /**
     * <pre>
     * get chain information, include current height and consensus node list
     * </pre>
     *
     * <code>GET_CHAIN_INFO = 3;</code>
     */
    GET_CHAIN_INFO(3),
    /**
     * <pre>
     * get the last configuration block
     * </pre>
     *
     * <code>GET_LAST_CONFIG_BLOCK = 4;</code>
     */
    GET_LAST_CONFIG_BLOCK(4),
    /**
     * <pre>
     * get block by block hash
     * </pre>
     *
     * <code>GET_BLOCK_BY_HASH = 5;</code>
     */
    GET_BLOCK_BY_HASH(5),
    /**
     * <pre>
     * get the list of chains the node knows
     * </pre>
     *
     * <code>GET_NODE_CHAIN_LIST = 6;</code>
     */
    GET_NODE_CHAIN_LIST(6),
    /**
     * <pre>
     * get governance information
     * </pre>
     *
     * <code>GET_GOVERNANCE_CONTRACT = 7;</code>
     */
    GET_GOVERNANCE_CONTRACT(7),
    /**
     * <pre>
     * get read/write set information by eight
     * </pre>
     *
     * <code>GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT = 8;</code>
     */
    GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT(8),
    /**
     * <pre>
     * get read/write set information by hash
     * </pre>
     *
     * <code>GET_BLOCK_WITH_TXRWSETS_BY_HASH = 9;</code>
     */
    GET_BLOCK_WITH_TXRWSETS_BY_HASH(9),
    /**
     * <pre>
     * get the last block
     * </pre>
     *
     * <code>GET_LAST_BLOCK = 10;</code>
     */
    GET_LAST_BLOCK(10),
    /**
     * <pre>
     * get full block by height
     * </pre>
     *
     * <code>GET_FULL_BLOCK_BY_HEIGHT = 11;</code>
     */
    GET_FULL_BLOCK_BY_HEIGHT(11),
    /**
     * <pre>
     * get block height by tx id
     * </pre>
     *
     * <code>GET_BLOCK_HEIGHT_BY_TX_ID = 12;</code>
     */
    GET_BLOCK_HEIGHT_BY_TX_ID(12),
    /**
     * <pre>
     * get block height by hash
     * </pre>
     *
     * <code>GET_BLOCK_HEIGHT_BY_HASH = 13;</code>
     */
    GET_BLOCK_HEIGHT_BY_HASH(13),
    /**
     * <pre>
     *get block header by height
     * </pre>
     *
     * <code>GET_BLOCK_HEADER_BY_HEIGHT = 14;</code>
     */
    GET_BLOCK_HEADER_BY_HEIGHT(14),
    /**
     * <pre>
     * get archived block height
     * </pre>
     *
     * <code>GET_ARCHIVED_BLOCK_HEIGHT = 15;</code>
     */
    GET_ARCHIVED_BLOCK_HEIGHT(15),
    /**
     * <pre>
     *get all contract info list
     * </pre>
     *
     * <code>GET_ALL_CONTRACTS = 16;</code>
     */
    GET_ALL_CONTRACTS(16),
    /**
     * <pre>
     * get merkle path by tx id
     * </pre>
     *
     * <code>GET_MERKLE_PATH_BY_TX_ID = 17;</code>
     */
    GET_MERKLE_PATH_BY_TX_ID(17),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * get block by transactionId
     * </pre>
     *
     * <code>GET_BLOCK_BY_TX_ID = 0;</code>
     */
    public static final int GET_BLOCK_BY_TX_ID_VALUE = 0;
    /**
     * <pre>
     * get transaction by transactionId
     * </pre>
     *
     * <code>GET_TX_BY_TX_ID = 1;</code>
     */
    public static final int GET_TX_BY_TX_ID_VALUE = 1;
    /**
     * <pre>
     * get block by block height
     * </pre>
     *
     * <code>GET_BLOCK_BY_HEIGHT = 2;</code>
     */
    public static final int GET_BLOCK_BY_HEIGHT_VALUE = 2;
    /**
     * <pre>
     * get chain information, include current height and consensus node list
     * </pre>
     *
     * <code>GET_CHAIN_INFO = 3;</code>
     */
    public static final int GET_CHAIN_INFO_VALUE = 3;
    /**
     * <pre>
     * get the last configuration block
     * </pre>
     *
     * <code>GET_LAST_CONFIG_BLOCK = 4;</code>
     */
    public static final int GET_LAST_CONFIG_BLOCK_VALUE = 4;
    /**
     * <pre>
     * get block by block hash
     * </pre>
     *
     * <code>GET_BLOCK_BY_HASH = 5;</code>
     */
    public static final int GET_BLOCK_BY_HASH_VALUE = 5;
    /**
     * <pre>
     * get the list of chains the node knows
     * </pre>
     *
     * <code>GET_NODE_CHAIN_LIST = 6;</code>
     */
    public static final int GET_NODE_CHAIN_LIST_VALUE = 6;
    /**
     * <pre>
     * get governance information
     * </pre>
     *
     * <code>GET_GOVERNANCE_CONTRACT = 7;</code>
     */
    public static final int GET_GOVERNANCE_CONTRACT_VALUE = 7;
    /**
     * <pre>
     * get read/write set information by eight
     * </pre>
     *
     * <code>GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT = 8;</code>
     */
    public static final int GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT_VALUE = 8;
    /**
     * <pre>
     * get read/write set information by hash
     * </pre>
     *
     * <code>GET_BLOCK_WITH_TXRWSETS_BY_HASH = 9;</code>
     */
    public static final int GET_BLOCK_WITH_TXRWSETS_BY_HASH_VALUE = 9;
    /**
     * <pre>
     * get the last block
     * </pre>
     *
     * <code>GET_LAST_BLOCK = 10;</code>
     */
    public static final int GET_LAST_BLOCK_VALUE = 10;
    /**
     * <pre>
     * get full block by height
     * </pre>
     *
     * <code>GET_FULL_BLOCK_BY_HEIGHT = 11;</code>
     */
    public static final int GET_FULL_BLOCK_BY_HEIGHT_VALUE = 11;
    /**
     * <pre>
     * get block height by tx id
     * </pre>
     *
     * <code>GET_BLOCK_HEIGHT_BY_TX_ID = 12;</code>
     */
    public static final int GET_BLOCK_HEIGHT_BY_TX_ID_VALUE = 12;
    /**
     * <pre>
     * get block height by hash
     * </pre>
     *
     * <code>GET_BLOCK_HEIGHT_BY_HASH = 13;</code>
     */
    public static final int GET_BLOCK_HEIGHT_BY_HASH_VALUE = 13;
    /**
     * <pre>
     *get block header by height
     * </pre>
     *
     * <code>GET_BLOCK_HEADER_BY_HEIGHT = 14;</code>
     */
    public static final int GET_BLOCK_HEADER_BY_HEIGHT_VALUE = 14;
    /**
     * <pre>
     * get archived block height
     * </pre>
     *
     * <code>GET_ARCHIVED_BLOCK_HEIGHT = 15;</code>
     */
    public static final int GET_ARCHIVED_BLOCK_HEIGHT_VALUE = 15;
    /**
     * <pre>
     *get all contract info list
     * </pre>
     *
     * <code>GET_ALL_CONTRACTS = 16;</code>
     */
    public static final int GET_ALL_CONTRACTS_VALUE = 16;
    /**
     * <pre>
     * get merkle path by tx id
     * </pre>
     *
     * <code>GET_MERKLE_PATH_BY_TX_ID = 17;</code>
     */
    public static final int GET_MERKLE_PATH_BY_TX_ID_VALUE = 17;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ChainQueryFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ChainQueryFunction forNumber(int value) {
      switch (value) {
        case 0: return GET_BLOCK_BY_TX_ID;
        case 1: return GET_TX_BY_TX_ID;
        case 2: return GET_BLOCK_BY_HEIGHT;
        case 3: return GET_CHAIN_INFO;
        case 4: return GET_LAST_CONFIG_BLOCK;
        case 5: return GET_BLOCK_BY_HASH;
        case 6: return GET_NODE_CHAIN_LIST;
        case 7: return GET_GOVERNANCE_CONTRACT;
        case 8: return GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT;
        case 9: return GET_BLOCK_WITH_TXRWSETS_BY_HASH;
        case 10: return GET_LAST_BLOCK;
        case 11: return GET_FULL_BLOCK_BY_HEIGHT;
        case 12: return GET_BLOCK_HEIGHT_BY_TX_ID;
        case 13: return GET_BLOCK_HEIGHT_BY_HASH;
        case 14: return GET_BLOCK_HEADER_BY_HEIGHT;
        case 15: return GET_ARCHIVED_BLOCK_HEIGHT;
        case 16: return GET_ALL_CONTRACTS;
        case 17: return GET_MERKLE_PATH_BY_TX_ID;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ChainQueryFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ChainQueryFunction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ChainQueryFunction>() {
            public ChainQueryFunction findValueByNumber(int number) {
              return ChainQueryFunction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.ChainQuery.getDescriptor().getEnumTypes().get(0);
    }

    private static final ChainQueryFunction[] VALUES = values();

    public static ChainQueryFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ChainQueryFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.ChainQueryFunction)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035syscontract/chain_query.proto\022\013syscont" +
      "ract*\205\004\n\022ChainQueryFunction\022\026\n\022GET_BLOCK" +
      "_BY_TX_ID\020\000\022\023\n\017GET_TX_BY_TX_ID\020\001\022\027\n\023GET_" +
      "BLOCK_BY_HEIGHT\020\002\022\022\n\016GET_CHAIN_INFO\020\003\022\031\n" +
      "\025GET_LAST_CONFIG_BLOCK\020\004\022\025\n\021GET_BLOCK_BY" +
      "_HASH\020\005\022\027\n\023GET_NODE_CHAIN_LIST\020\006\022\033\n\027GET_" +
      "GOVERNANCE_CONTRACT\020\007\022%\n!GET_BLOCK_WITH_" +
      "TXRWSETS_BY_HEIGHT\020\010\022#\n\037GET_BLOCK_WITH_T" +
      "XRWSETS_BY_HASH\020\t\022\022\n\016GET_LAST_BLOCK\020\n\022\034\n" +
      "\030GET_FULL_BLOCK_BY_HEIGHT\020\013\022\035\n\031GET_BLOCK" +
      "_HEIGHT_BY_TX_ID\020\014\022\034\n\030GET_BLOCK_HEIGHT_B" +
      "Y_HASH\020\r\022\036\n\032GET_BLOCK_HEADER_BY_HEIGHT\020\016" +
      "\022\035\n\031GET_ARCHIVED_BLOCK_HEIGHT\020\017\022\025\n\021GET_A" +
      "LL_CONTRACTS\020\020\022\034\n\030GET_MERKLE_PATH_BY_TX_" +
      "ID\020\021BO\n\035org.chainmaker.pb.syscontractZ.c" +
      "hainmaker.org/chainmaker/pb-go/v2/syscon" +
      "tractb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
