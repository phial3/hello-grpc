// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscontract/cert_manage.proto

package org.chainmaker.pb.syscontract;

public final class CertManage {
  private CertManage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * methods of certificate management
   * </pre>
   *
   * Protobuf enum {@code syscontract.CertManageFunction}
   */
  public enum CertManageFunction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * add one certificate
     * </pre>
     *
     * <code>CERT_ADD = 0;</code>
     */
    CERT_ADD(0),
    /**
     * <pre>
     * delete certificates
     * </pre>
     *
     * <code>CERTS_DELETE = 1;</code>
     */
    CERTS_DELETE(1),
    /**
     * <pre>
     * query certificates
     * </pre>
     *
     * <code>CERTS_QUERY = 2;</code>
     */
    CERTS_QUERY(2),
    /**
     * <pre>
     * freeze certificates
     * </pre>
     *
     * <code>CERTS_FREEZE = 3;</code>
     */
    CERTS_FREEZE(3),
    /**
     * <pre>
     * unfreeze certificates
     * </pre>
     *
     * <code>CERTS_UNFREEZE = 4;</code>
     */
    CERTS_UNFREEZE(4),
    /**
     * <pre>
     * revoke certificates
     * </pre>
     *
     * <code>CERTS_REVOKE = 5;</code>
     */
    CERTS_REVOKE(5),
    /**
     * <pre>
     * add one certificate alias, any
     * </pre>
     *
     * <code>CERT_ALIAS_ADD = 6;</code>
     */
    CERT_ALIAS_ADD(6),
    /**
     * <pre>
     * update one certificate alias, self
     * </pre>
     *
     * <code>CERT_ALIAS_UPDATE = 7;</code>
     */
    CERT_ALIAS_UPDATE(7),
    /**
     * <pre>
     * delete certificate alias, admin
     * </pre>
     *
     * <code>CERTS_ALIAS_DELETE = 8;</code>
     */
    CERTS_ALIAS_DELETE(8),
    /**
     * <pre>
     * query certificate alias, admin
     * </pre>
     *
     * <code>CERTS_ALIAS_QUERY = 9;</code>
     */
    CERTS_ALIAS_QUERY(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * add one certificate
     * </pre>
     *
     * <code>CERT_ADD = 0;</code>
     */
    public static final int CERT_ADD_VALUE = 0;
    /**
     * <pre>
     * delete certificates
     * </pre>
     *
     * <code>CERTS_DELETE = 1;</code>
     */
    public static final int CERTS_DELETE_VALUE = 1;
    /**
     * <pre>
     * query certificates
     * </pre>
     *
     * <code>CERTS_QUERY = 2;</code>
     */
    public static final int CERTS_QUERY_VALUE = 2;
    /**
     * <pre>
     * freeze certificates
     * </pre>
     *
     * <code>CERTS_FREEZE = 3;</code>
     */
    public static final int CERTS_FREEZE_VALUE = 3;
    /**
     * <pre>
     * unfreeze certificates
     * </pre>
     *
     * <code>CERTS_UNFREEZE = 4;</code>
     */
    public static final int CERTS_UNFREEZE_VALUE = 4;
    /**
     * <pre>
     * revoke certificates
     * </pre>
     *
     * <code>CERTS_REVOKE = 5;</code>
     */
    public static final int CERTS_REVOKE_VALUE = 5;
    /**
     * <pre>
     * add one certificate alias, any
     * </pre>
     *
     * <code>CERT_ALIAS_ADD = 6;</code>
     */
    public static final int CERT_ALIAS_ADD_VALUE = 6;
    /**
     * <pre>
     * update one certificate alias, self
     * </pre>
     *
     * <code>CERT_ALIAS_UPDATE = 7;</code>
     */
    public static final int CERT_ALIAS_UPDATE_VALUE = 7;
    /**
     * <pre>
     * delete certificate alias, admin
     * </pre>
     *
     * <code>CERTS_ALIAS_DELETE = 8;</code>
     */
    public static final int CERTS_ALIAS_DELETE_VALUE = 8;
    /**
     * <pre>
     * query certificate alias, admin
     * </pre>
     *
     * <code>CERTS_ALIAS_QUERY = 9;</code>
     */
    public static final int CERTS_ALIAS_QUERY_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CertManageFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CertManageFunction forNumber(int value) {
      switch (value) {
        case 0: return CERT_ADD;
        case 1: return CERTS_DELETE;
        case 2: return CERTS_QUERY;
        case 3: return CERTS_FREEZE;
        case 4: return CERTS_UNFREEZE;
        case 5: return CERTS_REVOKE;
        case 6: return CERT_ALIAS_ADD;
        case 7: return CERT_ALIAS_UPDATE;
        case 8: return CERTS_ALIAS_DELETE;
        case 9: return CERTS_ALIAS_QUERY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CertManageFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CertManageFunction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CertManageFunction>() {
            public CertManageFunction findValueByNumber(int number) {
              return CertManageFunction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.CertManage.getDescriptor().getEnumTypes().get(0);
    }

    private static final CertManageFunction[] VALUES = values();

    public static CertManageFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CertManageFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.CertManageFunction)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035syscontract/cert_manage.proto\022\013syscont" +
      "ract*\327\001\n\022CertManageFunction\022\014\n\010CERT_ADD\020" +
      "\000\022\020\n\014CERTS_DELETE\020\001\022\017\n\013CERTS_QUERY\020\002\022\020\n\014" +
      "CERTS_FREEZE\020\003\022\022\n\016CERTS_UNFREEZE\020\004\022\020\n\014CE" +
      "RTS_REVOKE\020\005\022\022\n\016CERT_ALIAS_ADD\020\006\022\025\n\021CERT" +
      "_ALIAS_UPDATE\020\007\022\026\n\022CERTS_ALIAS_DELETE\020\010\022" +
      "\025\n\021CERTS_ALIAS_QUERY\020\tBO\n\035org.chainmaker" +
      ".pb.syscontractZ.chainmaker.org/chainmak" +
      "er/pb-go/v2/syscontractb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
