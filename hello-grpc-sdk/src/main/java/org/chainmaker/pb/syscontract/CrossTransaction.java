// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscontract/cross_transaction.proto

package org.chainmaker.pb.syscontract;

public final class CrossTransaction {
  private CrossTransaction() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code syscontract.CrossTransactionFunction}
   */
  public enum CrossTransactionFunction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * transaction execute
     * </pre>
     *
     * <code>EXECUTE = 0;</code>
     */
    EXECUTE(0),
    /**
     * <pre>
     * transaction commit
     * </pre>
     *
     * <code>COMMIT = 1;</code>
     */
    COMMIT(1),
    /**
     * <pre>
     * transaction rollback
     * </pre>
     *
     * <code>ROLLBACK = 2;</code>
     */
    ROLLBACK(2),
    /**
     * <pre>
     * read cross id state
     * </pre>
     *
     * <code>READ_STATE = 3;</code>
     */
    READ_STATE(3),
    /**
     * <pre>
     * save cross other transaction proof
     * </pre>
     *
     * <code>SAVE_PROOF = 4;</code>
     */
    SAVE_PROOF(4),
    /**
     * <pre>
     * read cross other transaction proof
     * </pre>
     *
     * <code>READ_PROOF = 5;</code>
     */
    READ_PROOF(5),
    /**
     * <pre>
     * arbitrate the cross transaction
     * </pre>
     *
     * <code>ARBITRATE = 6;</code>
     */
    ARBITRATE(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * transaction execute
     * </pre>
     *
     * <code>EXECUTE = 0;</code>
     */
    public static final int EXECUTE_VALUE = 0;
    /**
     * <pre>
     * transaction commit
     * </pre>
     *
     * <code>COMMIT = 1;</code>
     */
    public static final int COMMIT_VALUE = 1;
    /**
     * <pre>
     * transaction rollback
     * </pre>
     *
     * <code>ROLLBACK = 2;</code>
     */
    public static final int ROLLBACK_VALUE = 2;
    /**
     * <pre>
     * read cross id state
     * </pre>
     *
     * <code>READ_STATE = 3;</code>
     */
    public static final int READ_STATE_VALUE = 3;
    /**
     * <pre>
     * save cross other transaction proof
     * </pre>
     *
     * <code>SAVE_PROOF = 4;</code>
     */
    public static final int SAVE_PROOF_VALUE = 4;
    /**
     * <pre>
     * read cross other transaction proof
     * </pre>
     *
     * <code>READ_PROOF = 5;</code>
     */
    public static final int READ_PROOF_VALUE = 5;
    /**
     * <pre>
     * arbitrate the cross transaction
     * </pre>
     *
     * <code>ARBITRATE = 6;</code>
     */
    public static final int ARBITRATE_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CrossTransactionFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CrossTransactionFunction forNumber(int value) {
      switch (value) {
        case 0: return EXECUTE;
        case 1: return COMMIT;
        case 2: return ROLLBACK;
        case 3: return READ_STATE;
        case 4: return SAVE_PROOF;
        case 5: return READ_PROOF;
        case 6: return ARBITRATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CrossTransactionFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CrossTransactionFunction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CrossTransactionFunction>() {
            public CrossTransactionFunction findValueByNumber(int number) {
              return CrossTransactionFunction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.CrossTransaction.getDescriptor().getEnumTypes().get(0);
    }

    private static final CrossTransactionFunction[] VALUES = values();

    public static CrossTransactionFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CrossTransactionFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.CrossTransactionFunction)
  }

  /**
   * Protobuf enum {@code syscontract.CrossTxState}
   */
  public enum CrossTxState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *NON_EXIST cross id is not exist
     * </pre>
     *
     * <code>NON_EXIST = 0;</code>
     */
    NON_EXIST(0),
    /**
     * <pre>
     *INIT just mark this cross is has been processed
     * </pre>
     *
     * <code>INIT = 1;</code>
     */
    INIT(1),
    /**
     * <pre>
     *EXECUTE_OK cross tx execute successfully
     * </pre>
     *
     * <code>EXECUTE_OK = 2;</code>
     */
    EXECUTE_OK(2),
    /**
     * <pre>
     *EXECUTE_FAIL cross tx execute fail
     * </pre>
     *
     * <code>EXECUTE_FAIL = 3;</code>
     */
    EXECUTE_FAIL(3),
    /**
     * <pre>
     *COMMIT_OK cross tx commit successfully
     * </pre>
     *
     * <code>COMMIT_OK = 4;</code>
     */
    COMMIT_OK(4),
    /**
     * <pre>
     *COMMIT_FAIL cross tx commit fail
     * </pre>
     *
     * <code>COMMIT_FAIL = 5;</code>
     */
    COMMIT_FAIL(5),
    /**
     * <pre>
     *ROLLBACK_OK cross tx rollback successfully
     * </pre>
     *
     * <code>ROLLBACK_OK = 6;</code>
     */
    ROLLBACK_OK(6),
    /**
     * <pre>
     *ROLLBACK_FAIL cross tx rollback fail
     * </pre>
     *
     * <code>ROLLBACK_FAIL = 7;</code>
     */
    ROLLBACK_FAIL(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *NON_EXIST cross id is not exist
     * </pre>
     *
     * <code>NON_EXIST = 0;</code>
     */
    public static final int NON_EXIST_VALUE = 0;
    /**
     * <pre>
     *INIT just mark this cross is has been processed
     * </pre>
     *
     * <code>INIT = 1;</code>
     */
    public static final int INIT_VALUE = 1;
    /**
     * <pre>
     *EXECUTE_OK cross tx execute successfully
     * </pre>
     *
     * <code>EXECUTE_OK = 2;</code>
     */
    public static final int EXECUTE_OK_VALUE = 2;
    /**
     * <pre>
     *EXECUTE_FAIL cross tx execute fail
     * </pre>
     *
     * <code>EXECUTE_FAIL = 3;</code>
     */
    public static final int EXECUTE_FAIL_VALUE = 3;
    /**
     * <pre>
     *COMMIT_OK cross tx commit successfully
     * </pre>
     *
     * <code>COMMIT_OK = 4;</code>
     */
    public static final int COMMIT_OK_VALUE = 4;
    /**
     * <pre>
     *COMMIT_FAIL cross tx commit fail
     * </pre>
     *
     * <code>COMMIT_FAIL = 5;</code>
     */
    public static final int COMMIT_FAIL_VALUE = 5;
    /**
     * <pre>
     *ROLLBACK_OK cross tx rollback successfully
     * </pre>
     *
     * <code>ROLLBACK_OK = 6;</code>
     */
    public static final int ROLLBACK_OK_VALUE = 6;
    /**
     * <pre>
     *ROLLBACK_FAIL cross tx rollback fail
     * </pre>
     *
     * <code>ROLLBACK_FAIL = 7;</code>
     */
    public static final int ROLLBACK_FAIL_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CrossTxState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CrossTxState forNumber(int value) {
      switch (value) {
        case 0: return NON_EXIST;
        case 1: return INIT;
        case 2: return EXECUTE_OK;
        case 3: return EXECUTE_FAIL;
        case 4: return COMMIT_OK;
        case 5: return COMMIT_FAIL;
        case 6: return ROLLBACK_OK;
        case 7: return ROLLBACK_FAIL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CrossTxState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CrossTxState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CrossTxState>() {
            public CrossTxState findValueByNumber(int number) {
              return CrossTxState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.CrossTransaction.getDescriptor().getEnumTypes().get(1);
    }

    private static final CrossTxState[] VALUES = values();

    public static CrossTxState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CrossTxState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.CrossTxState)
  }

  /**
   * Protobuf enum {@code syscontract.CrossArbitrateCmd}
   */
  public enum CrossArbitrateCmd
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *AUTO_CMD automatic processing according to the process
     * </pre>
     *
     * <code>AUTO_CMD = 0;</code>
     */
    AUTO_CMD(0),
    /**
     * <pre>
     *EXECUTE_CMD execute the execution flow
     * </pre>
     *
     * <code>EXECUTE_CMD = 1;</code>
     */
    EXECUTE_CMD(1),
    /**
     * <pre>
     *COMMIT_CMD execute the commit flow
     * </pre>
     *
     * <code>COMMIT_CMD = 2;</code>
     */
    COMMIT_CMD(2),
    /**
     * <pre>
     *COMMIT_CMD execute the rollback flow
     * </pre>
     *
     * <code>ROLLBACK_CMD = 3;</code>
     */
    ROLLBACK_CMD(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *AUTO_CMD automatic processing according to the process
     * </pre>
     *
     * <code>AUTO_CMD = 0;</code>
     */
    public static final int AUTO_CMD_VALUE = 0;
    /**
     * <pre>
     *EXECUTE_CMD execute the execution flow
     * </pre>
     *
     * <code>EXECUTE_CMD = 1;</code>
     */
    public static final int EXECUTE_CMD_VALUE = 1;
    /**
     * <pre>
     *COMMIT_CMD execute the commit flow
     * </pre>
     *
     * <code>COMMIT_CMD = 2;</code>
     */
    public static final int COMMIT_CMD_VALUE = 2;
    /**
     * <pre>
     *COMMIT_CMD execute the rollback flow
     * </pre>
     *
     * <code>ROLLBACK_CMD = 3;</code>
     */
    public static final int ROLLBACK_CMD_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CrossArbitrateCmd valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CrossArbitrateCmd forNumber(int value) {
      switch (value) {
        case 0: return AUTO_CMD;
        case 1: return EXECUTE_CMD;
        case 2: return COMMIT_CMD;
        case 3: return ROLLBACK_CMD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CrossArbitrateCmd>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CrossArbitrateCmd> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CrossArbitrateCmd>() {
            public CrossArbitrateCmd findValueByNumber(int number) {
              return CrossArbitrateCmd.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.CrossTransaction.getDescriptor().getEnumTypes().get(2);
    }

    private static final CrossArbitrateCmd[] VALUES = values();

    public static CrossArbitrateCmd valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CrossArbitrateCmd(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:syscontract.CrossArbitrateCmd)
  }

  public interface CrossStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:syscontract.CrossState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.syscontract.CrossTxState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    int getStateValue();
    /**
     * <code>.syscontract.CrossTxState state = 1;</code>
     * @return The state.
     */
    org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState getState();
  }
  /**
   * Protobuf type {@code syscontract.CrossState}
   */
  public static final class CrossState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:syscontract.CrossState)
      CrossStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CrossState.newBuilder() to construct.
    private CrossState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CrossState() {
      state_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CrossState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CrossState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              state_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.syscontract.CrossTransaction.internal_static_syscontract_CrossState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.syscontract.CrossTransaction.internal_static_syscontract_CrossState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.syscontract.CrossTransaction.CrossState.class, org.chainmaker.pb.syscontract.CrossTransaction.CrossState.Builder.class);
    }

    public static final int STATE_FIELD_NUMBER = 1;
    private int state_;
    /**
     * <code>.syscontract.CrossTxState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    @java.lang.Override public int getStateValue() {
      return state_;
    }
    /**
     * <code>.syscontract.CrossTxState state = 1;</code>
     * @return The state.
     */
    @java.lang.Override public org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState getState() {
      @SuppressWarnings("deprecation")
      org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState result = org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.valueOf(state_);
      return result == null ? org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (state_ != org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.NON_EXIST.getNumber()) {
        output.writeEnum(1, state_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (state_ != org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.NON_EXIST.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.syscontract.CrossTransaction.CrossState)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.syscontract.CrossTransaction.CrossState other = (org.chainmaker.pb.syscontract.CrossTransaction.CrossState) obj;

      if (state_ != other.state_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_FIELD_NUMBER;
      hash = (53 * hash) + state_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.syscontract.CrossTransaction.CrossState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code syscontract.CrossState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:syscontract.CrossState)
        org.chainmaker.pb.syscontract.CrossTransaction.CrossStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.syscontract.CrossTransaction.internal_static_syscontract_CrossState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.syscontract.CrossTransaction.internal_static_syscontract_CrossState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.syscontract.CrossTransaction.CrossState.class, org.chainmaker.pb.syscontract.CrossTransaction.CrossState.Builder.class);
      }

      // Construct using org.chainmaker.pb.syscontract.CrossTransaction.CrossState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        state_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.syscontract.CrossTransaction.internal_static_syscontract_CrossState_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.syscontract.CrossTransaction.CrossState getDefaultInstanceForType() {
        return org.chainmaker.pb.syscontract.CrossTransaction.CrossState.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.syscontract.CrossTransaction.CrossState build() {
        org.chainmaker.pb.syscontract.CrossTransaction.CrossState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.syscontract.CrossTransaction.CrossState buildPartial() {
        org.chainmaker.pb.syscontract.CrossTransaction.CrossState result = new org.chainmaker.pb.syscontract.CrossTransaction.CrossState(this);
        result.state_ = state_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.syscontract.CrossTransaction.CrossState) {
          return mergeFrom((org.chainmaker.pb.syscontract.CrossTransaction.CrossState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.syscontract.CrossTransaction.CrossState other) {
        if (other == org.chainmaker.pb.syscontract.CrossTransaction.CrossState.getDefaultInstance()) return this;
        if (other.state_ != 0) {
          setStateValue(other.getStateValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.syscontract.CrossTransaction.CrossState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.syscontract.CrossTransaction.CrossState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int state_ = 0;
      /**
       * <code>.syscontract.CrossTxState state = 1;</code>
       * @return The enum numeric value on the wire for state.
       */
      @java.lang.Override public int getStateValue() {
        return state_;
      }
      /**
       * <code>.syscontract.CrossTxState state = 1;</code>
       * @param value The enum numeric value on the wire for state to set.
       * @return This builder for chaining.
       */
      public Builder setStateValue(int value) {
        
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.syscontract.CrossTxState state = 1;</code>
       * @return The state.
       */
      @java.lang.Override
      public org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState getState() {
        @SuppressWarnings("deprecation")
        org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState result = org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.valueOf(state_);
        return result == null ? org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState.UNRECOGNIZED : result;
      }
      /**
       * <code>.syscontract.CrossTxState state = 1;</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(org.chainmaker.pb.syscontract.CrossTransaction.CrossTxState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.syscontract.CrossTxState state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        
        state_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:syscontract.CrossState)
    }

    // @@protoc_insertion_point(class_scope:syscontract.CrossState)
    private static final org.chainmaker.pb.syscontract.CrossTransaction.CrossState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.syscontract.CrossTransaction.CrossState();
    }

    public static org.chainmaker.pb.syscontract.CrossTransaction.CrossState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CrossState>
        PARSER = new com.google.protobuf.AbstractParser<CrossState>() {
      @java.lang.Override
      public CrossState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CrossState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CrossState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CrossState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.syscontract.CrossTransaction.CrossState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_syscontract_CrossState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_syscontract_CrossState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#syscontract/cross_transaction.proto\022\013s" +
      "yscontract\"6\n\nCrossState\022(\n\005state\030\001 \001(\0162" +
      "\031.syscontract.CrossTxState*\200\001\n\030CrossTran" +
      "sactionFunction\022\013\n\007EXECUTE\020\000\022\n\n\006COMMIT\020\001" +
      "\022\014\n\010ROLLBACK\020\002\022\016\n\nREAD_STATE\020\003\022\016\n\nSAVE_P" +
      "ROOF\020\004\022\016\n\nREAD_PROOF\020\005\022\r\n\tARBITRATE\020\006*\215\001" +
      "\n\014CrossTxState\022\r\n\tNON_EXIST\020\000\022\010\n\004INIT\020\001\022" +
      "\016\n\nEXECUTE_OK\020\002\022\020\n\014EXECUTE_FAIL\020\003\022\r\n\tCOM" +
      "MIT_OK\020\004\022\017\n\013COMMIT_FAIL\020\005\022\017\n\013ROLLBACK_OK" +
      "\020\006\022\021\n\rROLLBACK_FAIL\020\007*T\n\021CrossArbitrateC" +
      "md\022\014\n\010AUTO_CMD\020\000\022\017\n\013EXECUTE_CMD\020\001\022\016\n\nCOM" +
      "MIT_CMD\020\002\022\020\n\014ROLLBACK_CMD\020\003BO\n\035org.chain" +
      "maker.pb.syscontractZ.chainmaker.org/cha" +
      "inmaker/pb-go/v2/syscontractb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_syscontract_CrossState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_syscontract_CrossState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_syscontract_CrossState_descriptor,
        new java.lang.String[] { "State", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
