// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txpool/transaction_pool.proto

package org.chainmaker.pb.txpool;

public final class TransactionPool {
  private TransactionPool() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * SignalType is a transaction event type
   * </pre>
   *
   * Protobuf enum {@code txpool.SignalType}
   */
  public enum SignalType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * no transaction
     * </pre>
     *
     * <code>NO_EVENT = 0;</code>
     */
    NO_EVENT(0),
    /**
     * <pre>
     * new transaction
     * </pre>
     *
     * <code>TRANSACTION_INCOME = 1;</code>
     */
    TRANSACTION_INCOME(1),
    /**
     * <pre>
     * packing block
     * </pre>
     *
     * <code>BLOCK_PROPOSE = 2;</code>
     */
    BLOCK_PROPOSE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * no transaction
     * </pre>
     *
     * <code>NO_EVENT = 0;</code>
     */
    public static final int NO_EVENT_VALUE = 0;
    /**
     * <pre>
     * new transaction
     * </pre>
     *
     * <code>TRANSACTION_INCOME = 1;</code>
     */
    public static final int TRANSACTION_INCOME_VALUE = 1;
    /**
     * <pre>
     * packing block
     * </pre>
     *
     * <code>BLOCK_PROPOSE = 2;</code>
     */
    public static final int BLOCK_PROPOSE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SignalType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SignalType forNumber(int value) {
      switch (value) {
        case 0: return NO_EVENT;
        case 1: return TRANSACTION_INCOME;
        case 2: return BLOCK_PROPOSE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SignalType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SignalType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SignalType>() {
            public SignalType findValueByNumber(int number) {
              return SignalType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.chainmaker.pb.txpool.TransactionPool.getDescriptor().getEnumTypes().get(0);
    }

    private static final SignalType[] VALUES = values();

    public static SignalType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SignalType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:txpool.SignalType)
  }

  public interface TxPoolSignalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:txpool.TxPoolSignal)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * transaction event type
     * </pre>
     *
     * <code>.txpool.SignalType signal_type = 1;</code>
     * @return The enum numeric value on the wire for signalType.
     */
    int getSignalTypeValue();
    /**
     * <pre>
     * transaction event type
     * </pre>
     *
     * <code>.txpool.SignalType signal_type = 1;</code>
     * @return The signalType.
     */
    org.chainmaker.pb.txpool.TransactionPool.SignalType getSignalType();

    /**
     * <pre>
     * chainId
     * </pre>
     *
     * <code>string chain_id = 2;</code>
     * @return The chainId.
     */
    java.lang.String getChainId();
    /**
     * <pre>
     * chainId
     * </pre>
     *
     * <code>string chain_id = 2;</code>
     * @return The bytes for chainId.
     */
    com.google.protobuf.ByteString
        getChainIdBytes();
  }
  /**
   * <pre>
   * TxPoolSignal is used by tx pool to send signal to block proposer
   * </pre>
   *
   * Protobuf type {@code txpool.TxPoolSignal}
   */
  public static final class TxPoolSignal extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:txpool.TxPoolSignal)
      TxPoolSignalOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TxPoolSignal.newBuilder() to construct.
    private TxPoolSignal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TxPoolSignal() {
      signalType_ = 0;
      chainId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TxPoolSignal();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TxPoolSignal(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              signalType_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              chainId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxPoolSignal_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxPoolSignal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.class, org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.Builder.class);
    }

    public static final int SIGNAL_TYPE_FIELD_NUMBER = 1;
    private int signalType_;
    /**
     * <pre>
     * transaction event type
     * </pre>
     *
     * <code>.txpool.SignalType signal_type = 1;</code>
     * @return The enum numeric value on the wire for signalType.
     */
    @java.lang.Override public int getSignalTypeValue() {
      return signalType_;
    }
    /**
     * <pre>
     * transaction event type
     * </pre>
     *
     * <code>.txpool.SignalType signal_type = 1;</code>
     * @return The signalType.
     */
    @java.lang.Override public org.chainmaker.pb.txpool.TransactionPool.SignalType getSignalType() {
      @SuppressWarnings("deprecation")
      org.chainmaker.pb.txpool.TransactionPool.SignalType result = org.chainmaker.pb.txpool.TransactionPool.SignalType.valueOf(signalType_);
      return result == null ? org.chainmaker.pb.txpool.TransactionPool.SignalType.UNRECOGNIZED : result;
    }

    public static final int CHAIN_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object chainId_;
    /**
     * <pre>
     * chainId
     * </pre>
     *
     * <code>string chain_id = 2;</code>
     * @return The chainId.
     */
    @java.lang.Override
    public java.lang.String getChainId() {
      java.lang.Object ref = chainId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        chainId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * chainId
     * </pre>
     *
     * <code>string chain_id = 2;</code>
     * @return The bytes for chainId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getChainIdBytes() {
      java.lang.Object ref = chainId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        chainId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (signalType_ != org.chainmaker.pb.txpool.TransactionPool.SignalType.NO_EVENT.getNumber()) {
        output.writeEnum(1, signalType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(chainId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, chainId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (signalType_ != org.chainmaker.pb.txpool.TransactionPool.SignalType.NO_EVENT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, signalType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(chainId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, chainId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal other = (org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal) obj;

      if (signalType_ != other.signalType_) return false;
      if (!getChainId()
          .equals(other.getChainId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SIGNAL_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + signalType_;
      hash = (37 * hash) + CHAIN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getChainId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TxPoolSignal is used by tx pool to send signal to block proposer
     * </pre>
     *
     * Protobuf type {@code txpool.TxPoolSignal}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:txpool.TxPoolSignal)
        org.chainmaker.pb.txpool.TransactionPool.TxPoolSignalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxPoolSignal_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxPoolSignal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.class, org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.Builder.class);
      }

      // Construct using org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        signalType_ = 0;

        chainId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxPoolSignal_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal getDefaultInstanceForType() {
        return org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal build() {
        org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal buildPartial() {
        org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal result = new org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal(this);
        result.signalType_ = signalType_;
        result.chainId_ = chainId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal) {
          return mergeFrom((org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal other) {
        if (other == org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal.getDefaultInstance()) return this;
        if (other.signalType_ != 0) {
          setSignalTypeValue(other.getSignalTypeValue());
        }
        if (!other.getChainId().isEmpty()) {
          chainId_ = other.chainId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int signalType_ = 0;
      /**
       * <pre>
       * transaction event type
       * </pre>
       *
       * <code>.txpool.SignalType signal_type = 1;</code>
       * @return The enum numeric value on the wire for signalType.
       */
      @java.lang.Override public int getSignalTypeValue() {
        return signalType_;
      }
      /**
       * <pre>
       * transaction event type
       * </pre>
       *
       * <code>.txpool.SignalType signal_type = 1;</code>
       * @param value The enum numeric value on the wire for signalType to set.
       * @return This builder for chaining.
       */
      public Builder setSignalTypeValue(int value) {
        
        signalType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * transaction event type
       * </pre>
       *
       * <code>.txpool.SignalType signal_type = 1;</code>
       * @return The signalType.
       */
      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.SignalType getSignalType() {
        @SuppressWarnings("deprecation")
        org.chainmaker.pb.txpool.TransactionPool.SignalType result = org.chainmaker.pb.txpool.TransactionPool.SignalType.valueOf(signalType_);
        return result == null ? org.chainmaker.pb.txpool.TransactionPool.SignalType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * transaction event type
       * </pre>
       *
       * <code>.txpool.SignalType signal_type = 1;</code>
       * @param value The signalType to set.
       * @return This builder for chaining.
       */
      public Builder setSignalType(org.chainmaker.pb.txpool.TransactionPool.SignalType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        signalType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * transaction event type
       * </pre>
       *
       * <code>.txpool.SignalType signal_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignalType() {
        
        signalType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object chainId_ = "";
      /**
       * <pre>
       * chainId
       * </pre>
       *
       * <code>string chain_id = 2;</code>
       * @return The chainId.
       */
      public java.lang.String getChainId() {
        java.lang.Object ref = chainId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          chainId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * chainId
       * </pre>
       *
       * <code>string chain_id = 2;</code>
       * @return The bytes for chainId.
       */
      public com.google.protobuf.ByteString
          getChainIdBytes() {
        java.lang.Object ref = chainId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          chainId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * chainId
       * </pre>
       *
       * <code>string chain_id = 2;</code>
       * @param value The chainId to set.
       * @return This builder for chaining.
       */
      public Builder setChainId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        chainId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * chainId
       * </pre>
       *
       * <code>string chain_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChainId() {
        
        chainId_ = getDefaultInstance().getChainId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * chainId
       * </pre>
       *
       * <code>string chain_id = 2;</code>
       * @param value The bytes for chainId to set.
       * @return This builder for chaining.
       */
      public Builder setChainIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        chainId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:txpool.TxPoolSignal)
    }

    // @@protoc_insertion_point(class_scope:txpool.TxPoolSignal)
    private static final org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal();
    }

    public static org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxPoolSignal>
        PARSER = new com.google.protobuf.AbstractParser<TxPoolSignal>() {
      @java.lang.Override
      public TxPoolSignal parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TxPoolSignal(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TxPoolSignal> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxPoolSignal> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.txpool.TransactionPool.TxPoolSignal getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TxBatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:txpool.TxBatch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * batch id
     * </pre>
     *
     * <code>int32 batch_id = 1;</code>
     * @return The batchId.
     */
    int getBatchId();

    /**
     * <pre>
     * batch transactions are broadcast by the node
     * </pre>
     *
     * <code>string node_id = 2;</code>
     * @return The nodeId.
     */
    java.lang.String getNodeId();
    /**
     * <pre>
     * batch transactions are broadcast by the node
     * </pre>
     *
     * <code>string node_id = 2;</code>
     * @return The bytes for nodeId.
     */
    com.google.protobuf.ByteString
        getNodeIdBytes();

    /**
     * <pre>
     * batch size
     * </pre>
     *
     * <code>int32 size = 3;</code>
     * @return The size.
     */
    int getSize();

    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction> 
        getTxsList();
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    org.chainmaker.pb.common.ChainmakerTransaction.Transaction getTxs(int index);
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    int getTxsCount();
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    java.util.List<? extends org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder> 
        getTxsOrBuilderList();
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder getTxsOrBuilder(
        int index);

    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    int getTxIdsMapCount();
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    boolean containsTxIdsMap(
        java.lang.String key);
    /**
     * Use {@link #getTxIdsMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getTxIdsMap();
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getTxIdsMapMap();
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */

    int getTxIdsMapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */

    int getTxIdsMapOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * transaction batch, used to add transaction efficiently
   * </pre>
   *
   * Protobuf type {@code txpool.TxBatch}
   */
  public static final class TxBatch extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:txpool.TxBatch)
      TxBatchOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TxBatch.newBuilder() to construct.
    private TxBatch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TxBatch() {
      nodeId_ = "";
      txs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TxBatch();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TxBatch(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              batchId_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              nodeId_ = s;
              break;
            }
            case 24: {

              size_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                txs_ = new java.util.ArrayList<org.chainmaker.pb.common.ChainmakerTransaction.Transaction>();
                mutable_bitField0_ |= 0x00000001;
              }
              txs_.add(
                  input.readMessage(org.chainmaker.pb.common.ChainmakerTransaction.Transaction.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                txIdsMap_ = com.google.protobuf.MapField.newMapField(
                    TxIdsMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              txIdsMap__ = input.readMessage(
                  TxIdsMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              txIdsMap_.getMutableMap().put(
                  txIdsMap__.getKey(), txIdsMap__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          txs_ = java.util.Collections.unmodifiableList(txs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetTxIdsMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.chainmaker.pb.txpool.TransactionPool.TxBatch.class, org.chainmaker.pb.txpool.TransactionPool.TxBatch.Builder.class);
    }

    public static final int BATCH_ID_FIELD_NUMBER = 1;
    private int batchId_;
    /**
     * <pre>
     * batch id
     * </pre>
     *
     * <code>int32 batch_id = 1;</code>
     * @return The batchId.
     */
    @java.lang.Override
    public int getBatchId() {
      return batchId_;
    }

    public static final int NODE_ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object nodeId_;
    /**
     * <pre>
     * batch transactions are broadcast by the node
     * </pre>
     *
     * <code>string node_id = 2;</code>
     * @return The nodeId.
     */
    @java.lang.Override
    public java.lang.String getNodeId() {
      java.lang.Object ref = nodeId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodeId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * batch transactions are broadcast by the node
     * </pre>
     *
     * <code>string node_id = 2;</code>
     * @return The bytes for nodeId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNodeIdBytes() {
      java.lang.Object ref = nodeId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <pre>
     * batch size
     * </pre>
     *
     * <code>int32 size = 3;</code>
     * @return The size.
     */
    @java.lang.Override
    public int getSize() {
      return size_;
    }

    public static final int TXS_FIELD_NUMBER = 4;
    private java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction> txs_;
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction> getTxsList() {
      return txs_;
    }
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder> 
        getTxsOrBuilderList() {
      return txs_;
    }
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    @java.lang.Override
    public int getTxsCount() {
      return txs_.size();
    }
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerTransaction.Transaction getTxs(int index) {
      return txs_.get(index);
    }
    /**
     * <pre>
     * transaction list
     * </pre>
     *
     * <code>repeated .common.Transaction txs = 4;</code>
     */
    @java.lang.Override
    public org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder getTxsOrBuilder(
        int index) {
      return txs_.get(index);
    }

    public static final int TX_IDS_MAP_FIELD_NUMBER = 5;
    private static final class TxIdsMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_TxIdsMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> txIdsMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetTxIdsMap() {
      if (txIdsMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TxIdsMapDefaultEntryHolder.defaultEntry);
      }
      return txIdsMap_;
    }

    public int getTxIdsMapCount() {
      return internalGetTxIdsMap().getMap().size();
    }
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */

    @java.lang.Override
    public boolean containsTxIdsMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTxIdsMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTxIdsMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getTxIdsMap() {
      return getTxIdsMapMap();
    }
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.Integer> getTxIdsMapMap() {
      return internalGetTxIdsMap().getMap();
    }
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    @java.lang.Override

    public int getTxIdsMapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTxIdsMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
     * </pre>
     *
     * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
     */
    @java.lang.Override

    public int getTxIdsMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetTxIdsMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (batchId_ != 0) {
        output.writeInt32(1, batchId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodeId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, nodeId_);
      }
      if (size_ != 0) {
        output.writeInt32(3, size_);
      }
      for (int i = 0; i < txs_.size(); i++) {
        output.writeMessage(4, txs_.get(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTxIdsMap(),
          TxIdsMapDefaultEntryHolder.defaultEntry,
          5);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (batchId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, batchId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nodeId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, nodeId_);
      }
      if (size_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, size_);
      }
      for (int i = 0; i < txs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, txs_.get(i));
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetTxIdsMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        txIdsMap__ = TxIdsMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, txIdsMap__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.chainmaker.pb.txpool.TransactionPool.TxBatch)) {
        return super.equals(obj);
      }
      org.chainmaker.pb.txpool.TransactionPool.TxBatch other = (org.chainmaker.pb.txpool.TransactionPool.TxBatch) obj;

      if (getBatchId()
          != other.getBatchId()) return false;
      if (!getNodeId()
          .equals(other.getNodeId())) return false;
      if (getSize()
          != other.getSize()) return false;
      if (!getTxsList()
          .equals(other.getTxsList())) return false;
      if (!internalGetTxIdsMap().equals(
          other.internalGetTxIdsMap())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BATCH_ID_FIELD_NUMBER;
      hash = (53 * hash) + getBatchId();
      hash = (37 * hash) + NODE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getNodeId().hashCode();
      hash = (37 * hash) + SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSize();
      if (getTxsCount() > 0) {
        hash = (37 * hash) + TXS_FIELD_NUMBER;
        hash = (53 * hash) + getTxsList().hashCode();
      }
      if (!internalGetTxIdsMap().getMap().isEmpty()) {
        hash = (37 * hash) + TX_IDS_MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTxIdsMap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chainmaker.pb.txpool.TransactionPool.TxBatch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * transaction batch, used to add transaction efficiently
     * </pre>
     *
     * Protobuf type {@code txpool.TxBatch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:txpool.TxBatch)
        org.chainmaker.pb.txpool.TransactionPool.TxBatchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetTxIdsMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableTxIdsMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.chainmaker.pb.txpool.TransactionPool.TxBatch.class, org.chainmaker.pb.txpool.TransactionPool.TxBatch.Builder.class);
      }

      // Construct using org.chainmaker.pb.txpool.TransactionPool.TxBatch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTxsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        batchId_ = 0;

        nodeId_ = "";

        size_ = 0;

        if (txsBuilder_ == null) {
          txs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          txsBuilder_.clear();
        }
        internalGetMutableTxIdsMap().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.chainmaker.pb.txpool.TransactionPool.internal_static_txpool_TxBatch_descriptor;
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxBatch getDefaultInstanceForType() {
        return org.chainmaker.pb.txpool.TransactionPool.TxBatch.getDefaultInstance();
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxBatch build() {
        org.chainmaker.pb.txpool.TransactionPool.TxBatch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.chainmaker.pb.txpool.TransactionPool.TxBatch buildPartial() {
        org.chainmaker.pb.txpool.TransactionPool.TxBatch result = new org.chainmaker.pb.txpool.TransactionPool.TxBatch(this);
        int from_bitField0_ = bitField0_;
        result.batchId_ = batchId_;
        result.nodeId_ = nodeId_;
        result.size_ = size_;
        if (txsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            txs_ = java.util.Collections.unmodifiableList(txs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.txs_ = txs_;
        } else {
          result.txs_ = txsBuilder_.build();
        }
        result.txIdsMap_ = internalGetTxIdsMap();
        result.txIdsMap_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.chainmaker.pb.txpool.TransactionPool.TxBatch) {
          return mergeFrom((org.chainmaker.pb.txpool.TransactionPool.TxBatch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.chainmaker.pb.txpool.TransactionPool.TxBatch other) {
        if (other == org.chainmaker.pb.txpool.TransactionPool.TxBatch.getDefaultInstance()) return this;
        if (other.getBatchId() != 0) {
          setBatchId(other.getBatchId());
        }
        if (!other.getNodeId().isEmpty()) {
          nodeId_ = other.nodeId_;
          onChanged();
        }
        if (other.getSize() != 0) {
          setSize(other.getSize());
        }
        if (txsBuilder_ == null) {
          if (!other.txs_.isEmpty()) {
            if (txs_.isEmpty()) {
              txs_ = other.txs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTxsIsMutable();
              txs_.addAll(other.txs_);
            }
            onChanged();
          }
        } else {
          if (!other.txs_.isEmpty()) {
            if (txsBuilder_.isEmpty()) {
              txsBuilder_.dispose();
              txsBuilder_ = null;
              txs_ = other.txs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              txsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTxsFieldBuilder() : null;
            } else {
              txsBuilder_.addAllMessages(other.txs_);
            }
          }
        }
        internalGetMutableTxIdsMap().mergeFrom(
            other.internalGetTxIdsMap());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.chainmaker.pb.txpool.TransactionPool.TxBatch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.chainmaker.pb.txpool.TransactionPool.TxBatch) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int batchId_ ;
      /**
       * <pre>
       * batch id
       * </pre>
       *
       * <code>int32 batch_id = 1;</code>
       * @return The batchId.
       */
      @java.lang.Override
      public int getBatchId() {
        return batchId_;
      }
      /**
       * <pre>
       * batch id
       * </pre>
       *
       * <code>int32 batch_id = 1;</code>
       * @param value The batchId to set.
       * @return This builder for chaining.
       */
      public Builder setBatchId(int value) {
        
        batchId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * batch id
       * </pre>
       *
       * <code>int32 batch_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBatchId() {
        
        batchId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object nodeId_ = "";
      /**
       * <pre>
       * batch transactions are broadcast by the node
       * </pre>
       *
       * <code>string node_id = 2;</code>
       * @return The nodeId.
       */
      public java.lang.String getNodeId() {
        java.lang.Object ref = nodeId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nodeId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * batch transactions are broadcast by the node
       * </pre>
       *
       * <code>string node_id = 2;</code>
       * @return The bytes for nodeId.
       */
      public com.google.protobuf.ByteString
          getNodeIdBytes() {
        java.lang.Object ref = nodeId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nodeId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * batch transactions are broadcast by the node
       * </pre>
       *
       * <code>string node_id = 2;</code>
       * @param value The nodeId to set.
       * @return This builder for chaining.
       */
      public Builder setNodeId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        nodeId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * batch transactions are broadcast by the node
       * </pre>
       *
       * <code>string node_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNodeId() {
        
        nodeId_ = getDefaultInstance().getNodeId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * batch transactions are broadcast by the node
       * </pre>
       *
       * <code>string node_id = 2;</code>
       * @param value The bytes for nodeId to set.
       * @return This builder for chaining.
       */
      public Builder setNodeIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        nodeId_ = value;
        onChanged();
        return this;
      }

      private int size_ ;
      /**
       * <pre>
       * batch size
       * </pre>
       *
       * <code>int32 size = 3;</code>
       * @return The size.
       */
      @java.lang.Override
      public int getSize() {
        return size_;
      }
      /**
       * <pre>
       * batch size
       * </pre>
       *
       * <code>int32 size = 3;</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(int value) {
        
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * batch size
       * </pre>
       *
       * <code>int32 size = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        
        size_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction> txs_ =
        java.util.Collections.emptyList();
      private void ensureTxsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          txs_ = new java.util.ArrayList<org.chainmaker.pb.common.ChainmakerTransaction.Transaction>(txs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerTransaction.Transaction, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder, org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder> txsBuilder_;

      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction> getTxsList() {
        if (txsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(txs_);
        } else {
          return txsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public int getTxsCount() {
        if (txsBuilder_ == null) {
          return txs_.size();
        } else {
          return txsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public org.chainmaker.pb.common.ChainmakerTransaction.Transaction getTxs(int index) {
        if (txsBuilder_ == null) {
          return txs_.get(index);
        } else {
          return txsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder setTxs(
          int index, org.chainmaker.pb.common.ChainmakerTransaction.Transaction value) {
        if (txsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxsIsMutable();
          txs_.set(index, value);
          onChanged();
        } else {
          txsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder setTxs(
          int index, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder builderForValue) {
        if (txsBuilder_ == null) {
          ensureTxsIsMutable();
          txs_.set(index, builderForValue.build());
          onChanged();
        } else {
          txsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder addTxs(org.chainmaker.pb.common.ChainmakerTransaction.Transaction value) {
        if (txsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxsIsMutable();
          txs_.add(value);
          onChanged();
        } else {
          txsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder addTxs(
          int index, org.chainmaker.pb.common.ChainmakerTransaction.Transaction value) {
        if (txsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxsIsMutable();
          txs_.add(index, value);
          onChanged();
        } else {
          txsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder addTxs(
          org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder builderForValue) {
        if (txsBuilder_ == null) {
          ensureTxsIsMutable();
          txs_.add(builderForValue.build());
          onChanged();
        } else {
          txsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder addTxs(
          int index, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder builderForValue) {
        if (txsBuilder_ == null) {
          ensureTxsIsMutable();
          txs_.add(index, builderForValue.build());
          onChanged();
        } else {
          txsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder addAllTxs(
          java.lang.Iterable<? extends org.chainmaker.pb.common.ChainmakerTransaction.Transaction> values) {
        if (txsBuilder_ == null) {
          ensureTxsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, txs_);
          onChanged();
        } else {
          txsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder clearTxs() {
        if (txsBuilder_ == null) {
          txs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          txsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public Builder removeTxs(int index) {
        if (txsBuilder_ == null) {
          ensureTxsIsMutable();
          txs_.remove(index);
          onChanged();
        } else {
          txsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder getTxsBuilder(
          int index) {
        return getTxsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder getTxsOrBuilder(
          int index) {
        if (txsBuilder_ == null) {
          return txs_.get(index);  } else {
          return txsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public java.util.List<? extends org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder> 
           getTxsOrBuilderList() {
        if (txsBuilder_ != null) {
          return txsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(txs_);
        }
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder addTxsBuilder() {
        return getTxsFieldBuilder().addBuilder(
            org.chainmaker.pb.common.ChainmakerTransaction.Transaction.getDefaultInstance());
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder addTxsBuilder(
          int index) {
        return getTxsFieldBuilder().addBuilder(
            index, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.getDefaultInstance());
      }
      /**
       * <pre>
       * transaction list
       * </pre>
       *
       * <code>repeated .common.Transaction txs = 4;</code>
       */
      public java.util.List<org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder> 
           getTxsBuilderList() {
        return getTxsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.chainmaker.pb.common.ChainmakerTransaction.Transaction, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder, org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder> 
          getTxsFieldBuilder() {
        if (txsBuilder_ == null) {
          txsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.chainmaker.pb.common.ChainmakerTransaction.Transaction, org.chainmaker.pb.common.ChainmakerTransaction.Transaction.Builder, org.chainmaker.pb.common.ChainmakerTransaction.TransactionOrBuilder>(
                  txs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          txs_ = null;
        }
        return txsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> txIdsMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetTxIdsMap() {
        if (txIdsMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TxIdsMapDefaultEntryHolder.defaultEntry);
        }
        return txIdsMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutableTxIdsMap() {
        onChanged();;
        if (txIdsMap_ == null) {
          txIdsMap_ = com.google.protobuf.MapField.newMapField(
              TxIdsMapDefaultEntryHolder.defaultEntry);
        }
        if (!txIdsMap_.isMutable()) {
          txIdsMap_ = txIdsMap_.copy();
        }
        return txIdsMap_;
      }

      public int getTxIdsMapCount() {
        return internalGetTxIdsMap().getMap().size();
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */

      @java.lang.Override
      public boolean containsTxIdsMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetTxIdsMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTxIdsMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getTxIdsMap() {
        return getTxIdsMapMap();
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.Integer> getTxIdsMapMap() {
        return internalGetTxIdsMap().getMap();
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */
      @java.lang.Override

      public int getTxIdsMapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTxIdsMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */
      @java.lang.Override

      public int getTxIdsMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetTxIdsMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTxIdsMap() {
        internalGetMutableTxIdsMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */

      public Builder removeTxIdsMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableTxIdsMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutableTxIdsMap() {
        return internalGetMutableTxIdsMap().getMutableMap();
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */
      public Builder putTxIdsMap(
          java.lang.String key,
          int value) {
        if (key == null) { throw new NullPointerException("map key"); }
        
        internalGetMutableTxIdsMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
       * </pre>
       *
       * <code>map&lt;string, int32&gt; tx_ids_map = 5;</code>
       */

      public Builder putAllTxIdsMap(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableTxIdsMap().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:txpool.TxBatch)
    }

    // @@protoc_insertion_point(class_scope:txpool.TxBatch)
    private static final org.chainmaker.pb.txpool.TransactionPool.TxBatch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.chainmaker.pb.txpool.TransactionPool.TxBatch();
    }

    public static org.chainmaker.pb.txpool.TransactionPool.TxBatch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TxBatch>
        PARSER = new com.google.protobuf.AbstractParser<TxBatch>() {
      @java.lang.Override
      public TxBatch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TxBatch(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TxBatch> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TxBatch> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.chainmaker.pb.txpool.TransactionPool.TxBatch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_txpool_TxPoolSignal_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_txpool_TxPoolSignal_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_txpool_TxBatch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_txpool_TxBatch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_txpool_TxBatch_TxIdsMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_txpool_TxBatch_TxIdsMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035txpool/transaction_pool.proto\022\006txpool\032" +
      "\030common/transaction.proto\"I\n\014TxPoolSigna" +
      "l\022\'\n\013signal_type\030\001 \001(\0162\022.txpool.SignalTy" +
      "pe\022\020\n\010chain_id\030\002 \001(\t\"\300\001\n\007TxBatch\022\020\n\010batc" +
      "h_id\030\001 \001(\005\022\017\n\007node_id\030\002 \001(\t\022\014\n\004size\030\003 \001(" +
      "\005\022 \n\003txs\030\004 \003(\0132\023.common.Transaction\0221\n\nt" +
      "x_ids_map\030\005 \003(\0132\035.txpool.TxBatch.TxIdsMa" +
      "pEntry\032/\n\rTxIdsMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005" +
      "value\030\002 \001(\005:\0028\001*E\n\nSignalType\022\014\n\010NO_EVEN" +
      "T\020\000\022\026\n\022TRANSACTION_INCOME\020\001\022\021\n\rBLOCK_PRO" +
      "POSE\020\002BE\n\030org.chainmaker.pb.txpoolZ)chai" +
      "nmaker.org/chainmaker/pb-go/v2/txpoolb\006p" +
      "roto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.chainmaker.pb.common.ChainmakerTransaction.getDescriptor(),
        });
    internal_static_txpool_TxPoolSignal_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_txpool_TxPoolSignal_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_txpool_TxPoolSignal_descriptor,
        new java.lang.String[] { "SignalType", "ChainId", });
    internal_static_txpool_TxBatch_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_txpool_TxBatch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_txpool_TxBatch_descriptor,
        new java.lang.String[] { "BatchId", "NodeId", "Size", "Txs", "TxIdsMap", });
    internal_static_txpool_TxBatch_TxIdsMapEntry_descriptor =
      internal_static_txpool_TxBatch_descriptor.getNestedTypes().get(0);
    internal_static_txpool_TxBatch_TxIdsMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_txpool_TxBatch_TxIdsMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    org.chainmaker.pb.common.ChainmakerTransaction.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
